{
  "rootUrl": "https://admin.googleapis.com/",
  "schemas": {
    "Domains": {
      "id": "Domains",
      "type": "object",
      "properties": {
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only)."
        },
        "domainAliases": {
          "description": "A list of domain alias objects. (Read-only)",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domain",
          "type": "string"
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        }
      }
    },
    "Aliases": {
      "properties": {
        "etag": {
          "type": "string"
        },
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        }
      },
      "description": "JSON response template to list aliases in Directory API.",
      "type": "object",
      "id": "Aliases"
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "parentDomainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string",
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAlias"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "creationTime": {
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string"
        }
      }
    },
    "Tokens": {
      "id": "Tokens",
      "properties": {
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#tokenList`.",
          "default": "admin#directory#tokenList"
        }
      },
      "description": "JSON response template for List tokens operation in Directory API.",
      "type": "object"
    },
    "Features": {
      "description": "Public API: Resources.features",
      "id": "Features",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#features#featuresList",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "features": {
          "items": {
            "$ref": "Feature"
          },
          "type": "array",
          "description": "The Features in this page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "CreatePrinterRequest": {
      "properties": {
        "parent": {
          "description": "Required. The name of the customer. Format: customers/{customer_id}",
          "type": "string"
        },
        "printer": {
          "$ref": "Printer",
          "description": "Required. A printer to create. If you want to place the printer under particular OU then populate printer.org_unit_id filed. Otherwise the printer will be placed under root OU."
        }
      },
      "description": "Request for adding a new printer.",
      "type": "object",
      "id": "CreatePrinterRequest"
    },
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "The action to be performed on the device.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "MobileDeviceAction"
    },
    "Domains2": {
      "id": "Domains2",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#domains",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domains": {
          "description": "A list of domain objects.",
          "items": {
            "$ref": "Domains"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserExternalId": {
      "type": "object",
      "id": "UserExternalId",
      "properties": {
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      },
      "description": "JSON template for an externalId entry."
    },
    "OrgUnits": {
      "properties": {
        "kind": {
          "description": "The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`.",
          "type": "string",
          "default": "admin#directory#orgUnits"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "type": "array",
          "description": "A list of organizational unit objects."
        }
      },
      "id": "OrgUnits",
      "type": "object"
    },
    "AuxiliaryMessage": {
      "type": "object",
      "properties": {
        "fieldMask": {
          "format": "google-fieldmask",
          "description": "Field that this message concerns.",
          "type": "string"
        },
        "severity": {
          "description": "Message severity",
          "enumDescriptions": [
            "Message type unspecified.",
            "Message of severity: info.",
            "Message of severity: warning.",
            "Message of severity: error."
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "SEVERITY_INFO",
            "SEVERITY_WARNING",
            "SEVERITY_ERROR"
          ],
          "type": "string"
        },
        "auxiliaryMessage": {
          "description": "Human readable message in English. Example: \"Given printer is invalid or no longer supported.\"",
          "type": "string"
        }
      },
      "id": "AuxiliaryMessage",
      "description": "Auxiliary message about issues with printers or settings. Example: {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model, message:\"Given printer is invalid or no longer supported.\"}"
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object",
      "properties": {
        "deviceIds": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "type": "array",
          "description": "Chrome OS devices to be moved to OU",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DirectoryChromeosdevicesCommandResult": {
      "description": "The result of executing a command.",
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object",
      "properties": {
        "executeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command was executed or failed to execute."
        },
        "result": {
          "description": "The result of the command.",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        },
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        }
      }
    },
    "UserIm": {
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        }
      },
      "type": "object"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "description": "Google Workspace Mobile Management includes Android, [Google Sync](https://support.google.com/a/answer/135937), and iOS devices. For more information about common group mobile device API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html).",
      "type": "object",
      "properties": {
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "deviceId": {
          "type": "string",
          "description": "The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier."
        },
        "applications": {
          "items": {
            "properties": {
              "packageName": {
                "type": "string",
                "description": "The application's package name. An example is `com.android.browser`."
              },
              "versionName": {
                "description": "The application's version name. An example is `3.2-140714`.",
                "type": "string"
              },
              "displayName": {
                "description": "The application's display name. An example is `Browser`.",
                "type": "string"
              },
              "versionCode": {
                "format": "int32",
                "type": "integer",
                "description": "The application's version code. An example is `13`."
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "description": "The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.",
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications."
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID the API service uses to identify the mobile device."
        },
        "kernelVersion": {
          "description": "The device's kernel version.",
          "type": "string"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "The device's serial number.",
          "type": "string"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user)."
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "os": {
          "description": "The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "The device's operating system build number."
        },
        "firstSync": {
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "description": "The compromised device status.",
          "type": "string"
        },
        "basebandVersion": {
          "description": "The device's baseband version.",
          "type": "string"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "The device's MAC address on Wi-Fi networks."
        },
        "imei": {
          "type": "string",
          "description": "The device's IMEI number."
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The list of accounts added on device (Read-only)"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "description": "The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not.",
          "type": "boolean"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "The device's status.",
          "type": "string"
        },
        "userAgent": {
          "type": "string",
          "description": "Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device)."
        },
        "defaultLanguage": {
          "description": "The default locale used on the device.",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "description": "The list of the owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.",
          "type": "array"
        },
        "meid": {
          "type": "string",
          "description": "The device's MEID number."
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "hardwareId": {
          "description": "The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property.",
          "type": "string"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device)."
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "The type of mobile device."
        }
      }
    },
    "UserSshPublicKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "expirationTimeUsec": {
          "format": "int64",
          "description": "An expiration time in microseconds since epoch.",
          "type": "string"
        }
      },
      "id": "UserSshPublicKey",
      "description": "JSON template for a POSIX account entry."
    },
    "User": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "any",
          "description": "The user's locations. The maximum allowed data size for this field is 10Kb."
        },
        "notes": {
          "description": "Notes for the user.",
          "type": "any"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName",
          "description": "Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information about character usage rules, see the [administration help center](https://support.google.com/a/answer/9193374). Maximum allowed data size for this field is 1Kb."
        },
        "thumbnailPhotoUrl": {
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "agreedToTerms": {
          "description": "Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement.",
          "readOnly": true,
          "type": "boolean"
        },
        "addresses": {
          "description": "The list of the user's addresses. The maximum allowed data size for this field is 10Kb.",
          "type": "any"
        },
        "includeInGlobalAddressList": {
          "description": "Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).",
          "type": "boolean"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "A list of SSH public keys."
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "description": "Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).",
          "readOnly": true
        },
        "creationTime": {
          "description": "User's G Suite account creation time. (Read-only)",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "isEnforcedIn2Sv": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "kind": {
          "description": "Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.",
          "type": "string",
          "default": "admin#directory#user",
          "readOnly": true
        },
        "nonEditableAliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "description": "Output only. The list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain."
        },
        "phones": {
          "type": "any",
          "description": "The list of the user's phone numbers. The maximum allowed data size for this field is 1Kb."
        },
        "primaryEmail": {
          "type": "string",
          "description": "The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user.",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "ims": {
          "type": "any",
          "description": "The list of the user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2Kb."
        },
        "gender": {
          "description": "The user's gender. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "relations": {
          "description": "The list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "suspensionReason": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`."
        },
        "organizations": {
          "type": "any",
          "description": "The list of organizations the user belongs to. The maximum allowed data size for this field is 10Kb."
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "Output only. The list of the user's alias email addresses.",
          "readOnly": true,
          "type": "array"
        },
        "externalIds": {
          "type": "any",
          "description": "The list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2Kb."
        },
        "isMailboxSetup": {
          "readOnly": true,
          "description": "Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.",
          "type": "boolean"
        },
        "isAdmin": {
          "readOnly": true,
          "description": "Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.",
          "type": "boolean"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "keywords": {
          "type": "any",
          "description": "The list of the user's keywords. The maximum allowed data size for this field is 1Kb."
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224)."
        },
        "websites": {
          "type": "any",
          "description": "The user's websites. The maximum allowed data size for this field is 2Kb."
        },
        "customerId": {
          "description": "Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.",
          "type": "string",
          "readOnly": true
        },
        "deletionTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "customSchemas": {
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`."
        },
        "hashFunction": {
          "description": "Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer.",
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`)."
        },
        "languages": {
          "description": "The user's languages. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "etag": {
          "type": "string",
          "description": "Output only. ETag of the resource.",
          "readOnly": true
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user."
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "emails": {
          "type": "any",
          "description": "The list of the user's email addresses. The maximum allowed data size for this field is 10Kb."
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password",
          "type": "string"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "If `true`, the user's IP address is [whitelisted](https://support.google.com/a/answer/60752)."
        },
        "lastLoginTime": {
          "format": "date-time",
          "type": "string",
          "description": "User's last login time. (Read-only)",
          "readOnly": true
        },
        "id": {
          "description": "The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.",
          "type": "string"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true
        }
      },
      "id": "User",
      "description": "The Directory API allows you to create and manage your account's users, user aliases, and user Gmail chat profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html)."
    },
    "UserRelation": {
      "type": "object",
      "description": "JSON template for a relation entry.",
      "properties": {
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        }
      },
      "id": "UserRelation"
    },
    "CalendarResource": {
      "properties": {
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        },
        "resourceId": {
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string",
          "description": "The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`."
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "capacity": {
          "format": "int32",
          "type": "integer",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        }
      },
      "type": "object",
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars"
    },
    "OrgUnit": {
      "properties": {
        "kind": {
          "default": "admin#directory#orgUnit",
          "description": "The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.",
          "type": "string"
        },
        "orgUnitId": {
          "description": "The unique ID of the organizational unit.",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).",
          "type": "string"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075)."
        },
        "parentOrgUnitId": {
          "description": "The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set.",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "description": "The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set.",
          "type": "string"
        },
        "name": {
          "description": "The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required.",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "description": {
          "description": "Description of the organizational unit.",
          "type": "string"
        }
      },
      "id": "OrgUnit",
      "description": "Managing your account's organizational units allows you to configure your users' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-org-units.html). The customer's organizational unit hierarchy is limited to 35 levels of depth.",
      "type": "object"
    },
    "UserLocation": {
      "description": "JSON template for a location entry.",
      "type": "object",
      "id": "UserLocation",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        }
      }
    },
    "BatchDeletePrintServersResponse": {
      "properties": {
        "failedPrintServers": {
          "type": "array",
          "description": "A list of update failures.",
          "items": {
            "$ref": "PrintServerFailureInfo"
          }
        },
        "printServerIds": {
          "items": {
            "type": "string"
          },
          "description": "A list of print server IDs that were successfully deleted.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "BatchDeletePrintServersResponse"
    },
    "UserPhoto": {
      "properties": {
        "id": {
          "description": "The ID the API uses to uniquely identify the user.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#user#photo",
          "description": "The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "width": {
          "format": "int32",
          "description": "Width of the photo in pixels.",
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "description": "Height of the photo in pixels.",
          "type": "integer"
        },
        "photoData": {
          "description": "The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.",
          "format": "byte",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding."
        },
        "primaryEmail": {
          "type": "string",
          "description": "The user's primary email address."
        }
      },
      "type": "object",
      "id": "UserPhoto"
    },
    "Customer": {
      "type": "object",
      "id": "Customer",
      "properties": {
        "customerCreationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The customer's creation time (Readonly)"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format."
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the `www` prefix when creating a new customer.",
          "type": "string"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "id": {
          "description": "The unique ID for the customer's Google Workspace account. (Readonly)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#customer",
          "type": "string",
          "description": "Identifies the resource as a customer. Value: `admin#directory#customer`"
        }
      }
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry.",
      "id": "UserPosixAccount",
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "gid": {
          "format": "uint64",
          "description": "The default group ID.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "uid": {
          "format": "uint64",
          "description": "The POSIX compliant user ID.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        }
      }
    },
    "Token": {
      "id": "Token",
      "type": "object",
      "properties": {
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of authorization scopes the application is granted."
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#token`.",
          "default": "admin#directory#token",
          "type": "string"
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        }
      },
      "description": "JSON template for token resource in Directory API."
    },
    "Privileges": {
      "id": "Privileges",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#privileges`.",
          "default": "admin#directory#privileges"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "description": "A list of Privilege resources.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        }
      }
    },
    "UserName": {
      "type": "object",
      "id": "UserName",
      "properties": {
        "fullName": {
          "description": "The user's full name formed by concatenating the first and last name values.",
          "type": "string"
        },
        "givenName": {
          "type": "string",
          "description": "The user's first name. Required when creating a user account.",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "familyName": {
          "type": "string",
          "description": "The user's last name. Required when creating a user account.",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        }
      }
    },
    "RoleAssignments": {
      "type": "object",
      "id": "RoleAssignments",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always `admin#directory#roleAssignments`."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "FailureInfo": {
      "id": "FailureInfo",
      "type": "object",
      "description": "Info about failures",
      "properties": {
        "errorCode": {
          "enum": [
            "OK",
            "CANCELLED",
            "UNKNOWN",
            "INVALID_ARGUMENT",
            "DEADLINE_EXCEEDED",
            "NOT_FOUND",
            "ALREADY_EXISTS",
            "PERMISSION_DENIED",
            "UNAUTHENTICATED",
            "RESOURCE_EXHAUSTED",
            "FAILED_PRECONDITION",
            "ABORTED",
            "OUT_OF_RANGE",
            "UNIMPLEMENTED",
            "INTERNAL",
            "UNAVAILABLE",
            "DATA_LOSS"
          ],
          "description": "Canonical code for why the update failed to apply.",
          "enumDescriptions": [
            "Not an error; returned on success. HTTP Mapping: 200 OK",
            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
          ],
          "type": "string"
        },
        "errorMessage": {
          "description": "Failure reason message.",
          "type": "string"
        },
        "printerId": {
          "type": "string",
          "description": "Id of a failed printer."
        },
        "printer": {
          "$ref": "Printer",
          "description": "Failed printer."
        }
      }
    },
    "UserKeyword": {
      "type": "object",
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "properties": {
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      }
    },
    "Members": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "default": "admin#directory#members",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "members": {
          "type": "array",
          "description": "A list of member objects.",
          "items": {
            "$ref": "Member"
          }
        }
      },
      "type": "object",
      "id": "Members"
    },
    "ListPrintServersResponse": {
      "id": "ListPrintServersResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` in a request to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "printServers": {
          "items": {
            "$ref": "PrintServer"
          },
          "type": "array",
          "description": "List of print servers."
        }
      }
    },
    "DomainAliases": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases"
        },
        "domainAliases": {
          "description": "A list of domain alias objects.",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DomainAliases"
    },
    "OsUpdateStatus": {
      "description": "Contains information regarding the current OS update status.",
      "properties": {
        "updateTime": {
          "type": "string",
          "description": "Date and time of the last successful OS update."
        },
        "targetKioskAppVersion": {
          "description": "New required platform version from the pending updated kiosk app.",
          "type": "string"
        },
        "state": {
          "description": "The update state of an OS update.",
          "enumDescriptions": [
            "The update state is unspecified.",
            "There is an update pending but it hasn't started.",
            "The pending update is being downloaded.",
            "The device is ready to install the update, but must reboot."
          ],
          "enum": [
            "updateStateUnspecified",
            "updateStateNotStarted",
            "updateStateDownloadInProgress",
            "updateStateNeedReboot"
          ],
          "type": "string"
        },
        "updateCheckTime": {
          "description": "Date and time of the last update check.",
          "type": "string"
        },
        "targetOsVersion": {
          "type": "string",
          "description": "New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy \"0.0.0.0\" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot."
        },
        "rebootTime": {
          "type": "string",
          "description": "Date and time of the last reboot."
        }
      },
      "id": "OsUpdateStatus",
      "type": "object"
    },
    "VerificationCode": {
      "id": "VerificationCode",
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "kind": {
          "description": "The type of the resource. This is always `admin#directory#verificationCode`.",
          "default": "admin#directory#verificationCode",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        }
      },
      "description": "The Directory API allows you to view, generate, and invalidate backup verification codes for a user."
    },
    "Users": {
      "type": "object",
      "id": "Users",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "User"
          },
          "description": "A list of user objects."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#users",
          "description": "Kind of resource this is."
        }
      }
    },
    "FeatureRename": {
      "type": "object",
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature."
        }
      }
    },
    "CalendarResources": {
      "id": "CalendarResources",
      "type": "object",
      "description": "Public API: Resources.calendars",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "CalendarResource"
          },
          "description": "The CalendarResources in this page of results.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      }
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "chromeosdevices": {
          "description": "A list of Chrome OS Device objects.",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request."
        }
      }
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "type": "object",
      "id": "Channel",
      "properties": {
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "kind": {
          "default": "api#channel",
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`."
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "expiration": {
          "type": "string",
          "format": "int64",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional. For example, `params.ttl` specifies the time-to-live in seconds for the notification channel, where the default is 2 hours and the maximum TTL is 2 days."
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        }
      }
    },
    "MobileDevices": {
      "properties": {
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "A list of Mobile Device objects.",
          "type": "array"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "MobileDevices"
    },
    "BatchDeletePrintServersRequest": {
      "description": "Request to delete multiple existing print servers in a batch.",
      "id": "BatchDeletePrintServersRequest",
      "properties": {
        "printServerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of print server IDs that should be deleted (max `100` per batch)."
        }
      },
      "type": "object"
    },
    "BatchCreatePrintersResponse": {
      "type": "object",
      "description": "Response for adding new printers in batch.",
      "id": "BatchCreatePrintersResponse",
      "properties": {
        "printers": {
          "type": "array",
          "items": {
            "$ref": "Printer"
          },
          "description": "A list of successfully created printers with their IDs populated."
        },
        "failures": {
          "type": "array",
          "description": "A list of create failures. Printer IDs are not populated, as printer were not created.",
          "items": {
            "$ref": "FailureInfo"
          }
        }
      }
    },
    "Member": {
      "properties": {
        "id": {
          "description": "The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`.",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "email": {
          "type": "string",
          "description": "The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes."
        },
        "delivery_settings": {
          "description": "Defines mail delivery preferences of member. This is only supported by create/update/get.",
          "type": "string"
        },
        "role": {
          "type": "string",
          "description": "The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member's role, see the [administration help center](https://support.google.com/a/answer/167094)."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#member",
          "description": "The type of the API resource. For Members resources, the value is `admin#directory#member`."
        },
        "type": {
          "description": "The type of group member.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "A Google Groups member can be a user or another group. This member can be inside or outside of your account's domains. For more information about common group member tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-group-members).",
      "type": "object",
      "id": "Member"
    },
    "BatchCreatePrintServersRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "items": {
            "$ref": "CreatePrintServerRequest"
          },
          "description": "Required. A list of `PrintServer` resources to be created (max `50` per batch).",
          "type": "array"
        }
      },
      "id": "BatchCreatePrintServersRequest",
      "description": "Request to add multiple new print servers in a batch."
    },
    "UserPhone": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "description": "JSON template for a phone entry.",
      "type": "object",
      "id": "UserPhone"
    },
    "Role": {
      "id": "Role",
      "type": "object",
      "properties": {
        "rolePrivileges": {
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).",
                "type": "string"
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            }
          },
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "array",
          "description": "The set of privileges that are granted to this role."
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#role`.",
          "type": "string",
          "default": "admin#directory#role"
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string",
          "description": "Name of the role."
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns `true` if this is a pre-defined system role."
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns `true` if the role is a super admin role."
        },
        "roleId": {
          "type": "string",
          "description": "ID of the role.",
          "format": "int64"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Asp": {
      "id": "Asp",
      "description": "An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](https://support.google.com/a/answer/2537800#asp).",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#asp`.",
          "default": "admin#directory#asp"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "format": "int64",
          "description": "The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format."
        },
        "codeId": {
          "format": "int32",
          "type": "integer",
          "description": "The unique ID of the ASP."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their `userId`, entered when the ASP was created."
        },
        "lastTimeUsed": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format."
        }
      },
      "type": "object"
    },
    "ListPrintersResponse": {
      "id": "ListPrintersResponse",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "printers": {
          "description": "List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was not given in the request, then all printers will be returned.",
          "items": {
            "$ref": "Printer"
          },
          "type": "array"
        }
      },
      "description": "Response for listing printers.",
      "type": "object"
    },
    "GroupAlias": {
      "id": "GroupAlias",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "alias": {
          "description": "The alias email address.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Alias resources, the value is `admin#directory#alias`."
        },
        "primaryEmail": {
          "description": "The primary email address of the group.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the group."
        }
      },
      "description": "The Directory API manages aliases, which are alternative email addresses."
    },
    "MembersHasMember": {
      "description": "JSON template for Has Member response in Directory API.",
      "properties": {
        "isMember": {
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "MembersHasMember"
    },
    "VerificationCodes": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "The type of the resource. This is always `admin#directory#verificationCodesList`.",
          "default": "admin#directory#verificationCodesList"
        }
      },
      "id": "VerificationCodes",
      "description": "JSON response template for list verification codes operation in Directory API."
    },
    "ListPrinterModelsResponse": {
      "description": "Response for listing allowed printer models.",
      "id": "ListPrinterModelsResponse",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "printerModels": {
          "items": {
            "$ref": "PrinterModel"
          },
          "type": "array",
          "description": "Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time."
        }
      },
      "type": "object"
    },
    "Schema": {
      "type": "object",
      "description": "The type of API resource. For Schema resources, this is always `admin#directory#schema`.",
      "properties": {
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "A list of fields in the schema.",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array"
        },
        "schemaId": {
          "type": "string",
          "description": "The unique identifier of the schema (Read-only)"
        },
        "etag": {
          "description": "The ETag of the resource.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name for the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string"
        },
        "schemaName": {
          "description": "The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema",
          "type": "string"
        }
      },
      "id": "Schema"
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "type": "object",
      "id": "UserUndelete"
    },
    "BuildingAddress": {
      "id": "BuildingAddress",
      "properties": {
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address.",
          "type": "array"
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "Empty": {
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty",
      "properties": {}
    },
    "CustomerPostalAddress": {
      "type": "object",
      "id": "CustomerPostalAddress",
      "properties": {
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of `San Francisco`."
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "countryCode": {
          "description": "This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm).",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is `NY` for the state of New York."
        }
      }
    },
    "BatchCreatePrintersRequest": {
      "description": "Request for adding new printers in batch.",
      "id": "BatchCreatePrintersRequest",
      "type": "object",
      "properties": {
        "requests": {
          "description": "A list of Printers to be created. Max 50 at a time.",
          "items": {
            "$ref": "CreatePrinterRequest"
          },
          "type": "array"
        }
      }
    },
    "Buildings": {
      "id": "Buildings",
      "description": "Public API: Resources.buildings",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "buildings": {
          "type": "array",
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesCommand": {
      "description": "Information regarding a command that was issued to a device.",
      "properties": {
        "commandId": {
          "description": "Unique ID of a device command.",
          "format": "int64",
          "type": "string"
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        },
        "type": {
          "description": "The type of the command.",
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ]
        },
        "issueTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin."
        },
        "commandResult": {
          "description": "The result of the command execution.",
          "$ref": "DirectoryChromeosdevicesCommandResult"
        },
        "commandExpireTime": {
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "type": "string",
          "description": "Indicates the command state."
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesCommand"
    },
    "BatchDeletePrintersResponse": {
      "type": "object",
      "description": "Response for deleting existing printers in batch.",
      "id": "BatchDeletePrintersResponse",
      "properties": {
        "failedPrinters": {
          "description": "A list of update failures.",
          "items": {
            "$ref": "FailureInfo"
          },
          "type": "array"
        },
        "printerIds": {
          "description": "A list of Printer.id that were successfully deleted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "PrinterModel": {
      "type": "object",
      "id": "PrinterModel",
      "description": "Printer manufacturer and model",
      "properties": {
        "displayName": {
          "description": "Display name. eq. \"Brother MFC-8840D\"",
          "type": "string"
        },
        "manufacturer": {
          "description": "Manufacturer. eq. \"Brother\"",
          "type": "string"
        },
        "makeAndModel": {
          "description": "Make and model as represented in \"make_and_model\" field in Printer object. eq. \"brother mfc-8840d\"",
          "type": "string"
        }
      }
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#roles`.",
          "default": "admin#directory#roles"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of Role resources.",
          "items": {
            "$ref": "Role"
          }
        }
      },
      "type": "object"
    },
    "UserAlias": {
      "description": "The Directory API manages aliases, which are alternative email addresses.",
      "id": "UserAlias",
      "properties": {
        "kind": {
          "description": "The type of the API resource. For Alias resources, the value is `admin#directory#alias`.",
          "type": "string"
        },
        "primaryEmail": {
          "type": "string",
          "description": "The user's primary email address."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "id": {
          "description": "The unique ID for the user.",
          "type": "string"
        },
        "alias": {
          "type": "string",
          "description": "The alias email address."
        }
      },
      "type": "object"
    },
    "Building": {
      "properties": {
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "address": {
          "description": "The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Building",
      "description": "Public API: Resources.buildings"
    },
    "CreatePrintServerRequest": {
      "id": "CreatePrintServerRequest",
      "properties": {
        "printServer": {
          "$ref": "PrintServer",
          "description": "Required. A print server to create. If you want to place the print server under a specific organizational unit (OU), then populate the `org_unit_id`. Otherwise the print server is created under the root OU. The `org_unit_id` can be retrieved using the [Directory API](https://developers.google.com/admin-sdk/directory/v1/guides/manage-org-units)."
        },
        "parent": {
          "type": "string",
          "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`"
        }
      },
      "description": "Request for adding a new print server.",
      "type": "object"
    },
    "PrintServerFailureInfo": {
      "id": "PrintServerFailureInfo",
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string",
          "description": "Failure reason message."
        },
        "printServer": {
          "description": "Failed print server.",
          "$ref": "PrintServer"
        },
        "errorCode": {
          "enum": [
            "OK",
            "CANCELLED",
            "UNKNOWN",
            "INVALID_ARGUMENT",
            "DEADLINE_EXCEEDED",
            "NOT_FOUND",
            "ALREADY_EXISTS",
            "PERMISSION_DENIED",
            "UNAUTHENTICATED",
            "RESOURCE_EXHAUSTED",
            "FAILED_PRECONDITION",
            "ABORTED",
            "OUT_OF_RANGE",
            "UNIMPLEMENTED",
            "INTERNAL",
            "UNAVAILABLE",
            "DATA_LOSS"
          ],
          "description": "Canonical code for why the update failed to apply.",
          "type": "string",
          "enumDescriptions": [
            "Not an error; returned on success. HTTP Mapping: 200 OK",
            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
          ]
        },
        "printServerId": {
          "description": "ID of a failed print server.",
          "type": "string"
        }
      },
      "description": "Info about failures"
    },
    "Privilege": {
      "id": "Privilege",
      "properties": {
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#privilege",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#privilege`."
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "BatchDeletePrintersRequest": {
      "description": "Request for deleting existing printers in batch.",
      "properties": {
        "printerIds": {
          "items": {
            "type": "string"
          },
          "description": "A list of Printer.id that should be deleted. Max 100 at a time.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "BatchDeletePrintersRequest"
    },
    "FeatureInstance": {
      "description": "JSON template for a feature instance.",
      "id": "FeatureInstance",
      "type": "object",
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      }
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string",
          "description": "Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers."
        },
        "action": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "description": "Action to be taken on the Chrome OS device."
        }
      },
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "description": "Data about an update to the status of a Chrome OS device."
    },
    "UserMakeAdmin": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Indicates the administrator status of the user.",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          }
        }
      },
      "id": "UserMakeAdmin"
    },
    "Asps": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#aspList`.",
          "default": "admin#directory#aspList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "Asps"
    },
    "UserAbout": {
      "properties": {
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        },
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserAbout",
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "type": "object",
      "description": "You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).",
      "properties": {
        "readAccessType": {
          "description": "Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.",
          "default": "ALL_DOMAIN_USERS",
          "type": "string"
        },
        "indexed": {
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not. Default: `true`.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "The ETag of the field."
        },
        "multiValued": {
          "type": "boolean",
          "description": "A boolean specifying whether this is a multi-valued field or not. Default: `false`."
        },
        "fieldId": {
          "type": "string",
          "description": "The unique identifier of the field (Read-only)"
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported.",
          "properties": {
            "minValue": {
              "format": "double",
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "maxValue": {
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "displayName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Display Name of the field."
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "The name of the field."
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "type": "string",
          "description": "The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`."
        },
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "The type of the field."
        }
      }
    },
    "ChromeOsDevice": {
      "properties": {
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "cpuInfo": {
          "items": {
            "type": "object",
            "properties": {
              "architecture": {
                "type": "string",
                "description": "The CPU architecture."
              },
              "model": {
                "type": "string",
                "description": "The CPU model name."
              },
              "maxClockSpeedKhz": {
                "description": "The max CPU clock speed in kHz.",
                "type": "integer",
                "format": "int32"
              },
              "logicalCpus": {
                "items": {
                  "type": "object",
                  "properties": {
                    "idleDuration": {
                      "description": "Idle time since last boot.",
                      "type": "string",
                      "format": "google-duration"
                    },
                    "maxScalingFrequencyKhz": {
                      "format": "int32",
                      "description": "Maximum frequency the CPU is allowed to run at, by policy.",
                      "type": "integer"
                    },
                    "cStates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "sessionDuration": {
                            "description": "Time spent in the state since the last reboot.",
                            "type": "string",
                            "format": "google-duration"
                          },
                          "displayName": {
                            "description": "Name of the state.",
                            "type": "string"
                          }
                        },
                        "description": "Status of a single C-state. C-states are various modes the CPU can transition to in order to use more or less power."
                      },
                      "description": "C-States indicate the power consumption state of the CPU. For more information look at documentation published by the CPU maker."
                    },
                    "currentScalingFrequencyKhz": {
                      "format": "int32",
                      "description": "Current frequency the CPU is running at.",
                      "type": "integer"
                    }
                  },
                  "description": "Status of a single logical CPU."
                },
                "description": "Information for the Logical CPUs",
                "type": "array"
              }
            },
            "description": "CPU specs for a CPU."
          },
          "description": "Information regarding CPU specs in the device.",
          "type": "array"
        },
        "firstEnrollmentTime": {
          "description": "Date and time for the first time the device was enrolled.",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "type": "string",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "format": "int64"
        },
        "lastKnownNetwork": {
          "items": {
            "description": "Information for an ip address.",
            "properties": {
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              },
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Contains last known network (Read-only)"
        },
        "systemRamFreeReports": {
          "items": {
            "properties": {
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              },
              "systemRamFreeInfo": {
                "items": {
                  "format": "int64",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array"
        },
        "serialNumber": {
          "type": "string",
          "description": "The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab."
        },
        "osUpdateStatus": {
          "description": "The status of the OS updates for the device.",
          "$ref": "OsUpdateStatus"
        },
        "supportEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "Final date the device will be supported (Read-only)"
        },
        "notes": {
          "type": "string",
          "description": "Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed."
        },
        "model": {
          "description": "The device's model information. If the device does not have this information, this property is not included in the response.",
          "type": "string"
        },
        "annotatedLocation": {
          "description": "The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed.",
          "type": "string"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "description": "Date and time the device was last enrolled (Read-only)",
          "type": "string"
        },
        "annotatedAssetId": {
          "description": "The asset identifier as noted by an administrator or specified during enrollment.",
          "type": "string"
        },
        "screenshotFiles": {
          "type": "array",
          "items": {
            "properties": {
              "name": {
                "description": "File name",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "File type"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the file was created"
              }
            },
            "type": "object"
          },
          "description": "A list of screenshot files to download. Type is always \"SCREENSHOT_FILE\". (Read-only)"
        },
        "annotatedUser": {
          "type": "string",
          "description": "The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed."
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "macAddress": {
          "description": "The device's wireless MAC address. If the device does not have this information, it is not included in the response.",
          "type": "string"
        },
        "status": {
          "description": "The status of the device.",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).",
          "type": "string"
        },
        "orderNumber": {
          "description": "The device's order number. Only devices directly purchased from Google have an order number.",
          "type": "string"
        },
        "deviceId": {
          "description": "The unique ID of the Chrome device.",
          "type": "string"
        },
        "osVersion": {
          "type": "string",
          "description": "The Chrome device's operating system version."
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "description": "The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.",
          "type": "string",
          "default": "admin#directory#chromeosdevice"
        },
        "meid": {
          "type": "string",
          "description": "The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid)."
        },
        "recentUsers": {
          "description": "A list of recent device users, in descending order, by last login time.",
          "type": "array",
          "items": {
            "properties": {
              "email": {
                "type": "string",
                "description": "The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`."
              },
              "type": {
                "description": "The type of the user.",
                "type": "string"
              }
            },
            "description": "A list of recent device users, in descending order, by last login time.",
            "type": "object"
          }
        },
        "cpuStatusReports": {
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              },
              "cpuTemperatureInfo": {
                "description": "A list of CPU temperature samples.",
                "type": "array",
                "items": {
                  "properties": {
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    },
                    "temperature": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Temperature in Celsius degrees."
                    }
                  },
                  "type": "object"
                }
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "type": "array",
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Determines if the device will auto renew its support after the support end date. This is a read-only property."
        },
        "firmwareVersion": {
          "type": "string",
          "description": "The Chrome device's firmware version."
        },
        "activeTimeRanges": {
          "description": "A list of active time ranges (Read-only).",
          "items": {
            "properties": {
              "activeTime": {
                "type": "integer",
                "description": "Duration of usage in milliseconds.",
                "format": "int32"
              },
              "date": {
                "type": "string",
                "description": "Date of usage",
                "format": "date"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "The device's MAC address on the ethernet network interface."
        },
        "platformVersion": {
          "description": "The Chrome device's platform version.",
          "type": "string"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "items": {
                  "properties": {
                    "storageTotal": {
                      "description": "Total disk space [in bytes]",
                      "format": "int64",
                      "type": "string"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageFree": {
                      "type": "string",
                      "description": "Free disk space [in bytes]",
                      "format": "int64"
                    }
                  },
                  "type": "object"
                },
                "description": "Disk volumes",
                "type": "array"
              }
            }
          }
        },
        "bootMode": {
          "type": "string",
          "description": "The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch)."
        },
        "tpmVersionInfo": {
          "properties": {
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "family": {
              "type": "string",
              "description": "TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: \"1.2\" -\u003e 312e3200 TPM 2.0: \"2.0\" -\u003e 322e3000"
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2."
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object"
        },
        "deviceFiles": {
          "type": "array",
          "description": "A list of device files to download (Read-only)",
          "items": {
            "properties": {
              "name": {
                "description": "File name",
                "type": "string"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "type": {
                "description": "File type",
                "type": "string"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the file was created"
              }
            },
            "type": "object"
          }
        },
        "orgUnitId": {
          "description": "The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path, orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).",
          "type": "string"
        }
      },
      "description": "Google Chrome devices run on the [Chrome OS](https://support.google.com/chromeos). For more information about common API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).",
      "id": "ChromeOsDevice",
      "type": "object"
    },
    "Alias": {
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "alias": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        }
      },
      "type": "object",
      "id": "Alias"
    },
    "UserEmail": {
      "description": "JSON template for an email.",
      "id": "UserEmail",
      "properties": {
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "type": "object"
    },
    "PrintServer": {
      "description": "Configuration for a print server.",
      "properties": {
        "createTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. Time when the print server was created.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`"
        },
        "description": {
          "type": "string",
          "description": "Editable. Description of the print server (as shown in the Admin console)."
        },
        "displayName": {
          "type": "string",
          "description": "Editable. Display name of the print server (as shown in the Admin console)."
        },
        "orgUnitId": {
          "type": "string",
          "description": "ID of the organization unit (OU) that owns this print server. This value can only be set when the print server is initially created. If it's not populated, the print server is placed under the root OU. The `org_unit_id` can be retrieved using the [Directory API](/admin-sdk/directory/reference/rest/v1/orgunits)."
        },
        "uri": {
          "description": "Editable. Print server URI.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Immutable. ID of the print server. Leave empty when creating."
        }
      },
      "id": "PrintServer",
      "type": "object"
    },
    "UserGender": {
      "properties": {
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "type": "object",
      "description": "Defines an assignment of a role.",
      "properties": {
        "roleId": {
          "format": "int64",
          "description": "The ID of the role that is assigned.",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the entity this role is assigned to—either the `user_id` of a user or the `uniqueId` of a service account, as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts)."
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#roleAssignment`."
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "UserOrganization": {
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer"
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        }
      },
      "type": "object",
      "description": "JSON template for an organization entry.",
      "id": "UserOrganization"
    },
    "Group": {
      "description": "Google Groups provide your users the ability to send messages to groups of people using the group's email address. For more information about common tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-groups).",
      "id": "Group",
      "properties": {
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "Read-only. The list of a group's alias email addresses. To add, update, or remove a group's aliases, use the `groups.aliases` methods. If edited in a group's POST or PUT request, the edit is ignored.",
          "type": "array"
        },
        "adminCreated": {
          "description": "Read-only. Value is `true` if this group was created by an administrator rather than a user.",
          "type": "boolean"
        },
        "nonEditableAliases": {
          "description": "Read-only. The list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "id": {
          "description": "Read-only. The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`.",
          "type": "string"
        },
        "directMembersCount": {
          "format": "int64",
          "type": "string",
          "description": "The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group."
        },
        "description": {
          "description": "An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The group's display name."
        },
        "kind": {
          "description": "The type of the API resource. For Groups resources, the value is `admin#directory#group`.",
          "default": "admin#directory#group",
          "type": "string"
        },
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string",
          "description": "The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details."
        }
      },
      "type": "object"
    },
    "BatchCreatePrintServersResponse": {
      "type": "object",
      "id": "BatchCreatePrintServersResponse",
      "properties": {
        "failures": {
          "type": "array",
          "items": {
            "$ref": "PrintServerFailureInfo"
          },
          "description": "A list of create failures. `PrintServer` IDs are not populated, as print servers were not created."
        },
        "printServers": {
          "type": "array",
          "items": {
            "$ref": "PrintServer"
          },
          "description": "A list of successfully created print servers with their IDs populated."
        }
      }
    },
    "Printer": {
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time when printer was created.",
          "readOnly": true
        },
        "name": {
          "description": "The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)",
          "type": "string"
        },
        "auxiliaryMessages": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "AuxiliaryMessage"
          },
          "description": "Output only. Auxiliary messages about issues with the printer configuration if any."
        },
        "useDriverlessConfig": {
          "description": "Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored",
          "type": "boolean"
        },
        "orgUnitId": {
          "type": "string",
          "description": "Organization Unit that owns this printer (Only can be set during Printer creation)"
        },
        "makeAndModel": {
          "description": "Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response.",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "Editable. Printer URI."
        },
        "description": {
          "description": "Editable. Description of printer.",
          "type": "string"
        },
        "displayName": {
          "description": "Editable. Name of printer.",
          "type": "string"
        },
        "id": {
          "description": "Id of the printer. (During printer creation leave empty)",
          "type": "string"
        }
      },
      "id": "Printer",
      "description": "Printer configuration.",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "description": "A response for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "type": "object",
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "BuildingCoordinates": {
      "properties": {
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "type": "number",
          "format": "double"
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double"
        }
      },
      "type": "object",
      "id": "BuildingCoordinates",
      "description": "Public API: Resources.buildings"
    },
    "UserWebsite": {
      "type": "object",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "id": "UserWebsite",
      "description": "JSON template for a website entry."
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "type": "object",
      "description": "A request for issuing a command.",
      "properties": {
        "commandType": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "type": "string",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of command."
        },
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandRequest"
    },
    "UserCustomProperties": {
      "additionalProperties": {
        "type": "any"
      },
      "id": "UserCustomProperties",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "type": "object"
    },
    "UserLanguage": {
      "type": "object",
      "id": "UserLanguage",
      "description": "JSON template for a language entry.",
      "properties": {
        "customLanguage": {
          "description": "Other language. User can provide their own language name if there is no corresponding ISO 639 language code. If this is set, `languageCode` can't be set.",
          "type": "string"
        },
        "languageCode": {
          "description": "ISO 639 string representation of a language. See [Language Codes](/admin-sdk/directory/v1/languages) for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. Illegal values cause `SchemaException`. If this is set, `customLanguage` can't be set.",
          "type": "string"
        },
        "preference": {
          "description": "Optional. If present, controls whether the specified `languageCode` is the user's preferred language. If `customLanguage` is set, this can't be set. Allowed values are `preferred` and `not_preferred`.",
          "type": "string"
        }
      }
    },
    "Groups": {
      "type": "object",
      "id": "Groups",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "groups": {
          "type": "array",
          "description": "A list of group objects.",
          "items": {
            "$ref": "Group"
          }
        }
      }
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#Feature"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature."
        }
      },
      "id": "Feature"
    },
    "UserAddress": {
      "type": "object",
      "id": "UserAddress",
      "description": "JSON template for address.",
      "properties": {
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        }
      }
    },
    "Schemas": {
      "id": "Schemas",
      "description": "JSON response template for List Schema operation in Directory API.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas"
        },
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "description": "A list of UserSchema objects.",
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "revision": "20221020",
  "mtlsRootUrl": "https://admin.mtls.googleapis.com/",
  "ownerDomain": "google.com",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "id": "admin:directory_v1",
  "resources": {
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "patch": {
              "httpMethod": "PATCH",
              "id": "directory.resources.buildings.patch",
              "description": "Patches a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update."
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path"
                },
                "coordinatesSource": {
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "parameters": {
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "type": "string",
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query",
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.update"
            },
            "insert": {
              "parameters": {
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "location": "query",
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "Building"
              },
              "description": "Inserts a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Building"
              }
            },
            "delete": {
              "id": "directory.resources.buildings.delete",
              "description": "Deletes a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to delete."
                }
              },
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "description": "Retrieves a list of buildings for an account.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "location": "query",
                  "minimum": "1",
                  "format": "int32",
                  "type": "integer",
                  "maximum": "500",
                  "description": "Maximum number of results to return."
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "GET",
              "response": {
                "$ref": "Buildings"
              },
              "id": "directory.resources.buildings.list",
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "get": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.get",
              "description": "Retrieves a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the building to retrieve.",
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            }
          }
        },
        "calendars": {
          "methods": {
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.calendars.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "update": {
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.update",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "PUT"
            },
            "delete": {
              "id": "directory.resources.calendars.delete",
              "description": "Deletes a calendar resource.",
              "httpMethod": "DELETE",
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to delete.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "response": {
                "$ref": "CalendarResources"
              },
              "id": "directory.resources.calendars.list",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "orderBy": {
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include `resourceId`, `resourceName`, `capacity`, `buildingId`, and `floorName`. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example `buildingId, capacity desc` would return results sorted first by `buildingId` in ascending order then by `capacity` in descending order.",
                  "type": "string"
                },
                "query": {
                  "type": "string",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include `generatedResourceName`, `name`, `buildingId`, `floor_name`, `capacity`, `featureInstances.feature.name`, `resourceEmail`, `resourceCategory`. For example `buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone`.",
                  "location": "query"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "maximum": "500",
                  "location": "query",
                  "minimum": "1"
                }
              },
              "description": "Retrieves a list of calendar resources for an account.",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "get": {
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to retrieve."
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Retrieves a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.calendars.get"
            },
            "patch": {
              "id": "directory.resources.calendars.patch",
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Patches a calendar resource.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "calendarResourceId": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              }
            }
          }
        },
        "features": {
          "methods": {
            "rename": {
              "request": {
                "$ref": "FeatureRename"
              },
              "description": "Renames a feature.",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "httpMethod": "POST",
              "parameters": {
                "oldName": {
                  "location": "path",
                  "description": "The unique ID of the feature to rename.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.rename",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename"
            },
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.features.list",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "type": "integer",
                  "minimum": "1",
                  "maximum": "500"
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Retrieves a list of features for an account.",
              "response": {
                "$ref": "Features"
              }
            },
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "featureKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to update."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "request": {
                "$ref": "Feature"
              },
              "description": "Patches a feature.",
              "httpMethod": "PATCH",
              "id": "directory.resources.features.patch"
            },
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "GET",
              "description": "Retrieves a feature.",
              "id": "directory.resources.features.get",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "description": "The unique ID of the feature to retrieve.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              }
            },
            "insert": {
              "description": "Inserts a feature.",
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "POST",
              "id": "directory.resources.features.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Deletes a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.delete",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to delete.",
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string"
                }
              }
            },
            "update": {
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "request": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.update",
              "description": "Updates a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "PUT",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            }
          }
        }
      }
    },
    "users": {
      "methods": {
        "signOut": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "id": "directory.users.signOut",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "path": "admin/directory/v1/users/{userKey}/signOut"
        },
        "undelete": {
          "description": "Undeletes a deleted user.",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "The immutable id of the user",
              "location": "path"
            }
          },
          "id": "directory.users.undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "UserUndelete"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "parameterOrder": [
            "userKey"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "description": "Updates a user using patch semantics. The update method should be used instead, since it also supports patch semantics and has better performance. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.",
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.users.patch",
          "response": {
            "$ref": "User"
          }
        },
        "makeAdmin": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "id": "directory.users.makeAdmin",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "description": "Makes a user a super administrator.",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ]
        },
        "update": {
          "path": "admin/directory/v1/users/{userKey}",
          "description": "Updates a user. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared.",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "id": "directory.users.update"
        },
        "get": {
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "id": "directory.users.get",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "projection": {
              "type": "string",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "location": "query"
            },
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "customFieldMask": {
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.",
              "type": "string",
              "location": "query"
            },
            "viewType": {
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ]
            }
          },
          "description": "Retrieves a user.",
          "path": "admin/directory/v1/users/{userKey}"
        },
        "watch": {
          "request": {
            "$ref": "Channel"
          },
          "path": "admin/directory/v1/users/watch",
          "parameters": {
            "orderBy": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "email",
                "familyName",
                "givenName"
              ],
              "description": "Column to use for sorting results"
            },
            "maxResults": {
              "default": "100",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "maximum": "500",
              "location": "query"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ]
            },
            "event": {
              "enumDescriptions": [
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "location": "query",
              "description": "Events to watch for.",
              "enum": [
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "type": "string"
            },
            "projection": {
              "enum": [
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string"
            },
            "viewType": {
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "location": "query",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "customFieldMask": {
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query"
            }
          },
          "description": "Watches for changes in users list.",
          "httpMethod": "POST",
          "id": "directory.users.watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory/v1/users/watch",
          "response": {
            "$ref": "Channel"
          },
          "parameterOrder": []
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Retrieves a paginated list of either deleted users or all users in a domain.",
          "httpMethod": "GET",
          "response": {
            "$ref": "Users"
          },
          "parameterOrder": [],
          "id": "directory.users.list",
          "parameters": {
            "customer": {
              "location": "query",
              "description": "The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users). Either the `customer` or the `domain` parameter must be provided.",
              "type": "string"
            },
            "customFieldMask": {
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.",
              "type": "string",
              "location": "query"
            },
            "viewType": {
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "type": "string",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "location": "query",
              "default": "admin_view"
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order, ignoring case."
            },
            "projection": {
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "basic",
                "custom",
                "full"
              ],
              "type": "string",
              "default": "basic",
              "location": "query",
              "description": "What subset of fields to fetch for this user."
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "email",
                "familyName",
                "givenName"
              ],
              "description": "Property to use for sorting results."
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided."
            },
            "event": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "description": "Event on which subscription is intended (if subscribing)",
              "enum": [
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ]
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "type": "integer",
              "default": "100",
              "maximum": "500",
              "location": "query",
              "description": "Maximum number of results to return."
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users)."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to `true`, retrieves the list of deleted users. (Default: `false`)"
            }
          },
          "path": "admin/directory/v1/users",
          "flatPath": "admin/directory/v1/users"
        },
        "insert": {
          "description": "Creates a user.",
          "id": "directory.users.insert",
          "response": {
            "$ref": "User"
          },
          "parameters": {},
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/users",
          "request": {
            "$ref": "User"
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Deletes a user.",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "DELETE",
          "id": "directory.users.delete",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Removes an alias.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.delete",
              "parameters": {
                "alias": {
                  "type": "string",
                  "location": "path",
                  "description": "The alias to be removed.",
                  "required": true
                },
                "userKey": {
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE"
            },
            "list": {
              "response": {
                "$ref": "Aliases"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path"
                },
                "event": {
                  "enum": [
                    "add",
                    "delete"
                  ],
                  "description": "Events to watch for.",
                  "enumDescriptions": [
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "location": "query",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Lists all aliases for a user.",
              "id": "directory.users.aliases.list"
            },
            "watch": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameters": {
                "event": {
                  "type": "string",
                  "enum": [
                    "add",
                    "delete"
                  ],
                  "description": "Events to watch for.",
                  "enumDescriptions": [
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "location": "query"
                },
                "userKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "description": "Watches for changes in users list.",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Channel"
              },
              "id": "directory.users.aliases.watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "Channel"
              }
            },
            "insert": {
              "response": {
                "$ref": "Alias"
              },
              "id": "directory.users.aliases.insert",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "description": "Adds an alias."
            }
          }
        },
        "photos": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.delete",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "httpMethod": "DELETE",
              "description": "Removes the user's photo.",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
              "request": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PATCH",
              "parameters": {
                "userKey": {
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.patch",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "get": {
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "description": "Retrieves the user's photo.",
              "id": "directory.users.photos.get",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              }
            },
            "update": {
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.update",
              "description": "Adds a photo for the user.",
              "httpMethod": "PUT",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path",
                  "required": true
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "description": "Turns off 2-Step Verification for user.",
          "id": "directory.twoStepVerification.turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "description": "Issues a command for the device to execute.",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "parameters": {
                    "deviceId": {
                      "description": "Immutable. ID of Chrome OS Device.",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    },
                    "customerId": {
                      "type": "string",
                      "description": "Immutable. ID of the Google Workspace account.",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ]
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "description": "Gets command data a specific command issued to the device.",
                      "httpMethod": "GET",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "parameters": {
                        "deviceId": {
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Immutable. ID of Chrome OS Device."
                        },
                        "commandId": {
                          "type": "string",
                          "location": "path",
                          "description": "Immutable. ID of Chrome OS Device Command.",
                          "format": "int64",
                          "required": true
                        },
                        "customerId": {
                          "description": "Immutable. ID of the Google Workspace account.",
                          "location": "path",
                          "type": "string",
                          "required": true
                        }
                      },
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "domainAliases": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "response": {
            "$ref": "DomainAlias"
          },
          "httpMethod": "GET",
          "description": "Retrieves a domain alias of the customer.",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "location": "path"
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.domainAliases.get",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "id": "directory.domainAliases.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            },
            "domainAliasName": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name of domain alias to be retrieved."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domainAliases.insert",
          "description": "Inserts a domain alias of the customer.",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "DomainAlias"
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domainAliases.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAliases"
          },
          "description": "Lists the domain aliases of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "type": "string"
            },
            "parentDomainName": {
              "location": "query",
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            }
          }
        }
      }
    },
    "roles": {
      "methods": {
        "insert": {
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "POST",
          "description": "Creates a role.",
          "request": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.roles.insert",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Updates a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "httpMethod": "PUT",
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.roles.update",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "list": {
          "response": {
            "$ref": "Roles"
          },
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account."
            },
            "maxResults": {
              "format": "int32",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "maximum": "100"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list"
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "required": true
            },
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.patch",
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Patches a role."
        },
        "delete": {
          "parameters": {
            "roleId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role."
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.roles.delete",
          "httpMethod": "DELETE",
          "description": "Deletes a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "get": {
          "parameters": {
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "description": "Retrieves a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.get",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "Role"
          }
        }
      }
    },
    "schemas": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.get",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "GET",
          "response": {
            "$ref": "Schema"
          },
          "description": "Retrieves a schema.",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "required": true
            },
            "schemaKey": {
              "location": "path",
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "required": true
            }
          }
        },
        "insert": {
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "POST",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Creates a schema.",
          "id": "directory.schemas.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "request": {
            "$ref": "Schema"
          }
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.schemas.patch",
          "description": "Patches a schema.",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Schema"
          },
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "description": "Deletes a schema.",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "DELETE",
          "id": "directory.schemas.delete",
          "parameters": {
            "schemaKey": {
              "location": "path",
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "update": {
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "PUT",
          "id": "directory.schemas.update",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Updates a schema.",
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "required": true
            },
            "schemaKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema."
            }
          },
          "request": {
            "$ref": "Schema"
          }
        },
        "list": {
          "description": "Retrieves all schemas for a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "Schemas"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list"
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.insert",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "Domains"
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "description": "Inserts a domain of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Domains"
          }
        },
        "list": {
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.list",
          "description": "Lists the domains of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET"
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "DELETE",
          "parameters": {
            "domainName": {
              "required": true,
              "location": "path",
              "description": "Name of domain to be deleted",
              "type": "string"
            },
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.delete",
          "description": "Deletes a domain of the customer."
        },
        "get": {
          "id": "directory.domains.get",
          "httpMethod": "GET",
          "description": "Retrieves a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "domainName": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Name of domain to be retrieved"
            },
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Domains"
          },
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        }
      }
    },
    "customers": {
      "methods": {
        "update": {
          "httpMethod": "PUT",
          "request": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be updated",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Updates a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "id": "directory.customers.update"
        },
        "get": {
          "description": "Retrieves a customer.",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerKey"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "location": "path",
              "description": "Id of the customer to be retrieved",
              "required": true,
              "type": "string"
            }
          }
        },
        "patch": {
          "response": {
            "$ref": "Customer"
          },
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Customer"
          },
          "description": "Patches a customer.",
          "id": "directory.customers.patch",
          "parameterOrder": [
            "customerKey"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "path": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameters": {
            "customerKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Id of the customer to be updated"
            }
          }
        }
      },
      "resources": {
        "chrome": {
          "resources": {
            "printers": {
              "methods": {
                "batchCreatePrinters": {
                  "path": "admin/directory/v1/{+parent}/chrome/printers:batchCreatePrinters",
                  "response": {
                    "$ref": "BatchCreatePrintersResponse"
                  },
                  "request": {
                    "$ref": "BatchCreatePrintersRequest"
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:batchCreatePrinters",
                  "httpMethod": "POST",
                  "description": "Creates printers under given Organization Unit.",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Required. The name of the customer. Format: customers/{customer_id}",
                      "location": "path",
                      "type": "string",
                      "pattern": "^customers/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "id": "admin.customers.chrome.printers.batchCreatePrinters"
                },
                "get": {
                  "response": {
                    "$ref": "Printer"
                  },
                  "path": "admin/directory/v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Returns a `Printer` resource (printer's config).",
                  "id": "admin.customers.chrome.printers.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. The name of the printer to retrieve. Format: customers/{customer_id}/chrome/printers/{printer_id}",
                      "required": true,
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$"
                    }
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "httpMethod": "GET"
                },
                "patch": {
                  "request": {
                    "$ref": "Printer"
                  },
                  "description": "Updates a `Printer` resource.",
                  "httpMethod": "PATCH",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "parameters": {
                    "clearMask": {
                      "location": "query",
                      "format": "google-fieldmask",
                      "description": "The list of fields to be cleared. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched.",
                      "type": "string"
                    },
                    "name": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$",
                      "description": "The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)"
                    },
                    "updateMask": {
                      "location": "query",
                      "description": "The list of fields to be updated. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched.",
                      "format": "google-fieldmask",
                      "type": "string"
                    }
                  },
                  "id": "admin.customers.chrome.printers.patch",
                  "response": {
                    "$ref": "Printer"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "path": "admin/directory/v1/{+name}"
                },
                "delete": {
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$",
                      "description": "Required. The name of the printer to be updated. Format: customers/{customer_id}/chrome/printers/{printer_id}",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "path": "admin/directory/v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "description": "Deletes a `Printer`.",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "admin.customers.chrome.printers.delete"
                },
                "create": {
                  "parameters": {
                    "parent": {
                      "description": "Required. The name of the customer. Format: customers/{customer_id}",
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^customers/[^/]+$"
                    }
                  },
                  "request": {
                    "$ref": "Printer"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "path": "admin/directory/v1/{+parent}/chrome/printers",
                  "httpMethod": "POST",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers",
                  "id": "admin.customers.chrome.printers.create",
                  "description": "Creates a printer under given Organization Unit.",
                  "response": {
                    "$ref": "Printer"
                  }
                },
                "list": {
                  "response": {
                    "$ref": "ListPrintersResponse"
                  },
                  "parameters": {
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of objects to return. The service may return fewer than this value.",
                      "type": "integer",
                      "location": "query"
                    },
                    "orderBy": {
                      "description": "The order to sort results by. Must be one of display_name, description, make_and_model, or create_time. Default order is ascending, but descending order can be returned by appending \"desc\" to the order_by field. For instance, \"description desc\" will return the printers sorted by description in descending order.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "Search query. Search syntax is shared between this api and Admin Console printers pages.",
                      "location": "query",
                      "type": "string"
                    },
                    "orgUnitId": {
                      "type": "string",
                      "location": "query",
                      "description": "Organization Unit that we want to list the printers for. When org_unit is not present in the request then all printers of the customer are returned (or filtered). When org_unit is present in the request then only printers available to this OU will be returned (owned or inherited). You may see if printer is owned or inherited for this OU by looking at Printer.org_unit_id."
                    },
                    "parent": {
                      "description": "Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id}",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^customers/[^/]+$"
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "A page token, received from a previous call.",
                      "location": "query"
                    }
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printers",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "description": "List printers configs.",
                  "httpMethod": "GET",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers",
                  "id": "admin.customers.chrome.printers.list",
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "batchDeletePrinters": {
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:batchDeletePrinters",
                  "description": "Deletes printers in batch.",
                  "parameters": {
                    "parent": {
                      "description": "Required. The name of the customer. Format: customers/{customer_id}",
                      "required": true,
                      "type": "string",
                      "pattern": "^customers/[^/]+$",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "BatchDeletePrintersResponse"
                  },
                  "httpMethod": "POST",
                  "path": "admin/directory/v1/{+parent}/chrome/printers:batchDeletePrinters",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "id": "admin.customers.chrome.printers.batchDeletePrinters",
                  "request": {
                    "$ref": "BatchDeletePrintersRequest"
                  }
                },
                "listPrinterModels": {
                  "parameters": {
                    "pageToken": {
                      "description": "A page token, received from a previous call.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "location": "query",
                      "description": "Filer to list only models by a given manufacturer in format: \"manufacturer:Brother\". Search syntax is shared between this api and Admin Console printers pages.",
                      "type": "string"
                    },
                    "pageSize": {
                      "type": "integer",
                      "format": "int32",
                      "location": "query",
                      "description": "The maximum number of objects to return. The service may return fewer than this value."
                    },
                    "parent": {
                      "description": "Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id}",
                      "pattern": "^customers/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:listPrinterModels",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "id": "admin.customers.chrome.printers.listPrinterModels",
                  "description": "Lists the supported printer models.",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "response": {
                    "$ref": "ListPrinterModelsResponse"
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printers:listPrinterModels"
                }
              }
            },
            "printServers": {
              "methods": {
                "batchCreatePrintServers": {
                  "request": {
                    "$ref": "BatchCreatePrintServersRequest"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers:batchCreatePrintServers",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "response": {
                    "$ref": "BatchCreatePrintServersResponse"
                  },
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
                      "pattern": "^customers/[^/]+$"
                    }
                  },
                  "id": "admin.customers.chrome.printServers.batchCreatePrintServers",
                  "path": "admin/directory/v1/{+parent}/chrome/printServers:batchCreatePrintServers",
                  "description": "Creates multiple print servers."
                },
                "patch": {
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "PrintServer"
                  },
                  "response": {
                    "$ref": "PrintServer"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "parameters": {
                    "updateMask": {
                      "description": "The list of fields to update. Some fields are read-only and cannot be updated. Values for unspecified fields are patched.",
                      "format": "google-fieldmask",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "required": true,
                      "type": "string",
                      "description": "Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`",
                      "location": "path",
                      "pattern": "^customers/[^/]+/chrome/printServers/[^/]+$"
                    }
                  },
                  "path": "admin/directory/v1/{+name}",
                  "description": "Updates a print server's configuration.",
                  "id": "admin.customers.chrome.printServers.patch",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}",
                  "httpMethod": "PATCH"
                },
                "batchDeletePrintServers": {
                  "parameters": {
                    "parent": {
                      "required": true,
                      "location": "path",
                      "pattern": "^customers/[^/]+$",
                      "type": "string",
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{customer.id}`"
                    }
                  },
                  "request": {
                    "$ref": "BatchDeletePrintServersRequest"
                  },
                  "response": {
                    "$ref": "BatchDeletePrintServersResponse"
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printServers:batchDeletePrintServers",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Deletes multiple print servers.",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "id": "admin.customers.chrome.printServers.batchDeletePrintServers",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers:batchDeletePrintServers"
                },
                "create": {
                  "request": {
                    "$ref": "PrintServer"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "response": {
                    "$ref": "PrintServer"
                  },
                  "httpMethod": "POST",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "pattern": "^customers/[^/]+$",
                      "location": "path",
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "description": "Creates a print server.",
                  "path": "admin/directory/v1/{+parent}/chrome/printServers",
                  "id": "admin.customers.chrome.printServers.create"
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "description": "Deletes a print server.",
                  "path": "admin/directory/v1/{+name}",
                  "httpMethod": "DELETE",
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "admin.customers.chrome.printServers.delete",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}",
                  "parameters": {
                    "name": {
                      "pattern": "^customers/[^/]+/chrome/printServers/[^/]+$",
                      "description": "Required. The name of the print server to be deleted. Format: `customers/{customer.id}/chrome/printServers/{print_server.id}`",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "list": {
                  "id": "admin.customers.chrome.printServers.list",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers",
                  "response": {
                    "$ref": "ListPrintServersResponse"
                  },
                  "description": "Lists print server configurations.",
                  "path": "admin/directory/v1/{+parent}/chrome/printServers",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "orderBy": {
                      "description": "Sort order for results. Supported values are `display_name`, `description`, or `create_time`. Default order is ascending, but descending order can be returned by appending \"desc\" to the `order_by` field. For instance, `orderBy=='description desc'` returns the print servers sorted by description in descending order.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "location": "path",
                      "pattern": "^customers/[^/]+$",
                      "type": "string",
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
                      "required": true
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "A generated token to paginate results (the `next_page_token` from a previous call).",
                      "type": "string"
                    },
                    "orgUnitId": {
                      "description": "If `org_unit_id` is present in the request, only print servers owned or inherited by the organizational unit (OU) are returned. If the `PrintServer` resource's `org_unit_id` matches the one in the request, the OU owns the server. If `org_unit_id` is not specified in the request, all print servers are returned or filtered against.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "description": "The maximum number of objects to return (default `100`, max `100`). The service might return fewer than this value.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "filter": {
                      "type": "string",
                      "description": "Search query in [Common Expression Language syntax](https://github.com/google/cel-spec). Supported filters are `display_name`, `description`, and `uri`. Example: `printServer.displayName=='marketing-queue'`.",
                      "location": "query"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "get": {
                  "response": {
                    "$ref": "PrintServer"
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "admin/directory/v1/{+name}",
                  "id": "admin.customers.chrome.printServers.get",
                  "description": "Returns a print server's configuration.",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^customers/[^/]+/chrome/printServers/[^/]+$",
                      "location": "path",
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
                      "required": true
                    }
                  },
                  "httpMethod": "GET"
                }
              }
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "get": {
          "parameters": {
            "orgUnitPath": {
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID.",
              "pattern": "^.*$",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          },
          "id": "directory.orgunits.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Retrieves an organizational unit.",
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "list": {
          "response": {
            "$ref": "OrgUnits"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            },
            "orgUnitPath": {
              "default": "",
              "location": "query",
              "description": "The full path to the organizational unit or its unique ID. Returns the children of the specified organizational unit.",
              "type": "string"
            },
            "type": {
              "description": "Whether to return all sub-organizations or just immediate children.",
              "type": "string",
              "enum": [
                "all",
                "children"
              ],
              "enumDescriptions": [
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "location": "query"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieves a list of all organizational units for an account."
        },
        "insert": {
          "id": "directory.orgunits.insert",
          "httpMethod": "POST",
          "description": "Adds an organizational unit.",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "patch": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "PATCH",
          "parameters": {
            "orgUnitPath": {
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID.",
              "location": "path",
              "required": true,
              "pattern": "^.*$",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "request": {
            "$ref": "OrgUnit"
          },
          "description": "Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)",
          "id": "directory.orgunits.patch"
        },
        "update": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.update",
          "parameters": {
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "type": "string",
              "required": true
            },
            "orgUnitPath": {
              "location": "path",
              "pattern": "^.*$",
              "type": "string",
              "required": true,
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Updates an organizational unit.",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "delete": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID.",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Removes an organizational unit."
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "flatPath": "admin/directory_v1/channels/stop",
          "path": "admin/directory_v1/channels/stop",
          "httpMethod": "POST",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "Channel"
          },
          "id": "admin.channels.stop",
          "parameterOrder": [],
          "description": "Stops watching resources through this channel."
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "id": "directory.asps.delete",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            },
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "type": "integer",
              "required": true,
              "format": "int32",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Deletes an ASP issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "DELETE"
        },
        "list": {
          "description": "Lists the ASPs issued by a user.",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "Asps"
          },
          "httpMethod": "GET",
          "id": "directory.asps.list",
          "path": "admin/directory/v1/users/{userKey}/asps",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps"
        },
        "get": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Gets information about an ASP issued by a user.",
          "response": {
            "$ref": "Asp"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.asps.get",
          "parameters": {
            "codeId": {
              "type": "integer",
              "location": "path",
              "required": true,
              "format": "int32",
              "description": "The unique ID of the ASP."
            },
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "response": {
                "$ref": "Aliases"
              },
              "description": "Lists all aliases for a group.",
              "id": "directory.groups.aliases.list",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "GET",
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "parameters": {
                "groupKey": {
                  "required": true,
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "type": "string",
                  "location": "path"
                }
              }
            },
            "insert": {
              "id": "directory.groups.aliases.insert",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "description": "Adds an alias for the group.",
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "groupKey"
              ]
            },
            "delete": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "location": "path",
                  "type": "string"
                },
                "alias": {
                  "required": true,
                  "location": "path",
                  "description": "The alias to be removed",
                  "type": "string"
                }
              },
              "id": "directory.groups.aliases.delete",
              "description": "Removes an alias."
            }
          }
        }
      },
      "methods": {
        "patch": {
          "id": "directory.groups.patch",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          }
        },
        "list": {
          "response": {
            "$ref": "Groups"
          },
          "path": "admin/directory/v1/groups",
          "parameters": {
            "sortOrder": {
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "type": "string"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, fill in this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. Either the `customer` or the `domain` parameter must be provided."
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "default": "200",
              "location": "query",
              "type": "integer",
              "format": "int32",
              "minimum": "1"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "domain": {
              "description": "The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead.",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "enumDescriptions": [
                "Email of the group."
              ],
              "enum": [
                "email"
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "location": "query"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Retrieves all groups of a domain or of a user given a userKey (paginated).",
          "httpMethod": "GET",
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.groups.list"
        },
        "delete": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string"
            }
          },
          "description": "Deletes a group."
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "description": "Retrieves a group's properties.",
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "GET",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.groups.get",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        },
        "insert": {
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "parameters": {},
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [],
          "request": {
            "$ref": "Group"
          },
          "description": "Creates a group.",
          "id": "directory.groups.insert",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "update": {
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PUT",
          "description": "Updates a group's properties.",
          "id": "directory.groups.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "id": "directory.privileges.list",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "Privileges"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ]
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Deletes all access tokens issued by a user for an application.",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.delete"
        },
        "list": {
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "response": {
            "$ref": "Tokens"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "description": "Returns the set of tokens specified user has issued to 3rd party applications."
        },
        "get": {
          "response": {
            "$ref": "Token"
          },
          "description": "Gets information about an access token issued by a user.",
          "id": "directory.tokens.get",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "GET",
          "parameters": {
            "clientId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The Client ID of the application the token is issued to."
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        }
      }
    },
    "members": {
      "methods": {
        "update": {
          "httpMethod": "PUT",
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.update",
          "description": "Updates the membership of a user in the specified group.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.delete",
          "description": "Removes a member from a group.",
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "required": true,
              "type": "string"
            },
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "hasMember": {
          "id": "directory.members.hasMember",
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true,
              "type": "string"
            },
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested, but if nested, the `memberKey` and `groupKey` must be entities in the same domain or an `Invalid input` error is returned. To check for nested memberships that include entities outside of the group's domain, use the [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership) method in the Cloud Identity Groups API.",
          "response": {
            "$ref": "MembersHasMember"
          }
        },
        "patch": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "PATCH",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.patch",
          "parameters": {
            "memberKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "location": "path"
            },
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string"
            }
          },
          "description": "Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)."
        },
        "get": {
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "type": "string",
              "required": true
            },
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Retrieves a group member's properties.",
          "id": "directory.members.get"
        },
        "list": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "GET",
          "parameters": {
            "includeDerivedMembership": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false."
            },
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "type": "string"
            },
            "roles": {
              "location": "query",
              "description": "The `roles` query parameter allows you to retrieve group members by role. Allowed values are `OWNER`, `MANAGER`, and `MEMBER`.",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "format": "int32",
              "location": "query",
              "type": "integer",
              "default": "200"
            },
            "pageToken": {
              "description": "Token to specify next page in the list.",
              "type": "string",
              "location": "query"
            }
          },
          "description": "Retrieves a paginated list of all members in a group.",
          "id": "directory.members.list",
          "response": {
            "$ref": "Members"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "insert": {
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "POST",
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.members.insert",
          "response": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Adds a user to the specified group."
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "request": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Creates a role assignment.",
          "id": "directory.roleAssignments.insert"
        },
        "get": {
          "httpMethod": "GET",
          "description": "Retrieves a role assignment.",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            },
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.get",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ]
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roleAssignments.list",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "maximum": "200",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string"
            },
            "roleId": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all roleAssignments."
        },
        "delete": {
          "description": "Deletes a role assignment.",
          "id": "directory.roleAssignments.delete",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "roleAssignmentId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "action": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "httpMethod": "POST",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "parameters": {
            "resourceId": {
              "description": "The unique ID the API service uses to identify the mobile device.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path"
            }
          },
          "description": "Takes an action that affects a mobile device. For example, remotely wiping a device.",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "id": "directory.mobiledevices.action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameters": {
            "query": {
              "description": "Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/search-operators",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "orderBy": {
              "description": "Device property to use for sorting results.",
              "type": "string",
              "enum": [
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "location": "query",
              "enumDescriptions": [
                "The serial number for a Google Sync mobile device. For Android devices, this is a software generated unique identifier.",
                "The device owner's email address.",
                "Last policy settings sync date time of the device.",
                "The mobile device's model.",
                "The device owner's user name.",
                "The device's operating system.",
                "The device status.",
                "Type of the device."
              ]
            },
            "maxResults": {
              "format": "int32",
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "maximum": "100",
              "default": "100"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.mobiledevices.list",
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all user-owned mobile devices for an account. To retrieve a list that includes company-owned devices, use the Cloud Identity [Devices API](https://cloud.google.com/identity/docs/concepts/overview-devices) instead.",
          "response": {
            "$ref": "MobileDevices"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "description": "Removes a mobile device.",
          "parameters": {
            "resourceId": {
              "required": true,
              "location": "path",
              "description": "The unique ID the API service uses to identify the mobile device.",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.mobiledevices.delete"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.get",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query"
            },
            "resourceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The unique ID the API service uses to identify the mobile device."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "response": {
            "$ref": "MobileDevice"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Retrieves a mobile device's properties."
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "update": {
          "parameters": {
            "deviceId": {
              "type": "string",
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.",
              "location": "path",
              "required": true
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string"
            }
          },
          "id": "directory.chromeosdevices.update",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "moveDevicesToOu": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "description": "Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable. ID of the Google Workspace account"
            },
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "location": "query",
              "description": "Full path of the target organizational unit or its ID"
            }
          }
        },
        "patch": {
          "httpMethod": "PATCH",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.patch",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path"
            },
            "projection": {
              "type": "string",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "deviceId": {
              "required": true,
              "location": "path",
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.",
              "type": "string"
            }
          },
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "response": {
            "$ref": "ChromeOsDevice"
          }
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "id": "directory.chromeosdevices.action",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true,
              "type": "string"
            },
            "resourceId": {
              "required": true,
              "description": "The unique ID of the device. The `resourceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "list": {
          "description": "Retrieves a paginated list of Chrome OS devices within an account.",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "parameters": {
            "maxResults": {
              "default": "100",
              "location": "query",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "type": "integer"
            },
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "type": "string"
            },
            "sortOrder": {
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "type": "string"
            },
            "pageToken": {
              "description": "The `pageToken` query parameter is used to request the next page of query results. The follow-on request's `pageToken` query parameter is the `nextPageToken` from your previous response.",
              "type": "string",
              "location": "query"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/list-query-operators"
            },
            "includeChildOrgunits": {
              "type": "boolean",
              "location": "query",
              "description": "Return devices from all child orgunits, as well as the specified org unit. If this is set to true, 'orgUnitPath' must be provided."
            },
            "orderBy": {
              "enumDescriptions": [
                "Chrome device location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "The date and time the Chrome device was last synchronized with the policy settings in the Admin console.",
                "Chrome device notes as annotated by the administrator.",
                "The Chrome device serial number entered when the device was enabled.",
                "Chrome device status. For more information, see the \u003ca [chromeosdevices](/admin-sdk/directory/v1/reference/chromeosdevices.html)."
              ],
              "enum": [
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status"
              ],
              "description": "Device property to use for sorting results.",
              "type": "string",
              "location": "query"
            },
            "orgUnitPath": {
              "location": "query",
              "type": "string",
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID."
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.chromeosdevices.list",
          "httpMethod": "GET"
        },
        "get": {
          "httpMethod": "GET",
          "description": "Retrieves a Chrome OS device's properties.",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "deviceId": {
              "type": "string",
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "location": "path",
              "required": true
            },
            "projection": {
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "BASIC",
                "FULL"
              ],
              "description": "Determines whether the response contains the full list of properties or only a subset.",
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "invalidate": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "id": "directory.verificationCodes.invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true
            }
          },
          "description": "Invalidates the current backup verification codes for the user.",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ]
        },
        "generate": {
          "id": "directory.verificationCodes.generate",
          "httpMethod": "POST",
          "description": "Generates new backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user"
            }
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "id": "directory.verificationCodes.list"
        }
      }
    }
  },
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "ownerName": "Google",
  "protocol": "rest",
  "discoveryVersion": "v1",
  "title": "Admin SDK API",
  "name": "admin",
  "documentationLink": "https://developers.google.com/admin-sdk/",
  "packagePath": "admin",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.chrome.printers.readonly": {
          "description": "See the printers that your organization can use with Chrome"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "See info about users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.chrome.printers": {
          "description": "See, add, edit, and permanently delete the printers that your organization can use with Chrome"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "servicePath": "",
  "canonicalName": "directory",
  "batchPath": "batch",
  "version": "directory_v1",
  "fullyEncodeReservedExpansion": true,
  "basePath": "",
  "kind": "discovery#restDescription",
  "baseUrl": "https://admin.googleapis.com/",
  "parameters": {
    "alt": {
      "location": "query",
      "description": "Data format for response.",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "$.xgafv": {
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  }
}
