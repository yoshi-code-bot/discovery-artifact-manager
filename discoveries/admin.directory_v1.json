{
  "ownerName": "Google",
  "revision": "20221020",
  "id": "admin:directory_v1",
  "documentationLink": "https://developers.google.com/admin-sdk/",
  "baseUrl": "https://admin.googleapis.com/",
  "title": "Admin SDK API",
  "servicePath": "",
  "packagePath": "admin",
  "canonicalName": "directory",
  "name": "admin",
  "resources": {
    "customers": {
      "resources": {
        "chrome": {
          "resources": {
            "printServers": {
              "methods": {
                "batchDeletePrintServers": {
                  "description": "Deletes multiple print servers.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers:batchDeletePrintServers",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "location": "path",
                      "pattern": "^customers/[^/]+$",
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{customer.id}`",
                      "type": "string"
                    }
                  },
                  "request": {
                    "$ref": "BatchDeletePrintServersRequest"
                  },
                  "response": {
                    "$ref": "BatchDeletePrintServersResponse"
                  },
                  "httpMethod": "POST",
                  "path": "admin/directory/v1/{+parent}/chrome/printServers:batchDeletePrintServers",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "id": "admin.customers.chrome.printServers.batchDeletePrintServers"
                },
                "patch": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "pattern": "^customers/[^/]+/chrome/printServers/[^/]+$",
                      "required": true,
                      "description": "Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`"
                    },
                    "updateMask": {
                      "location": "query",
                      "format": "google-fieldmask",
                      "description": "The list of fields to update. Some fields are read-only and cannot be updated. Values for unspecified fields are patched.",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "PrintServer"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "admin/directory/v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "description": "Updates a print server's configuration.",
                  "request": {
                    "$ref": "PrintServer"
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}",
                  "httpMethod": "PATCH",
                  "id": "admin.customers.chrome.printServers.patch"
                },
                "list": {
                  "path": "admin/directory/v1/{+parent}/chrome/printServers",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListPrintServersResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Lists print server configurations.",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
                      "pattern": "^customers/[^/]+$"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A generated token to paginate results (the `next_page_token` from a previous call)."
                    },
                    "filter": {
                      "type": "string",
                      "description": "Search query in [Common Expression Language syntax](https://github.com/google/cel-spec). Supported filters are `display_name`, `description`, and `uri`. Example: `printServer.displayName=='marketing-queue'`.",
                      "location": "query"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of objects to return (default `100`, max `100`). The service might return fewer than this value.",
                      "type": "integer",
                      "location": "query"
                    },
                    "orderBy": {
                      "type": "string",
                      "location": "query",
                      "description": "Sort order for results. Supported values are `display_name`, `description`, or `create_time`. Default order is ascending, but descending order can be returned by appending \"desc\" to the `order_by` field. For instance, `orderBy=='description desc'` returns the print servers sorted by description in descending order."
                    },
                    "orgUnitId": {
                      "description": "If `org_unit_id` is present in the request, only print servers owned or inherited by the organizational unit (OU) are returned. If the `PrintServer` resource's `org_unit_id` matches the one in the request, the OU owns the server. If `org_unit_id` is not specified in the request, all print servers are returned or filtered against.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "id": "admin.customers.chrome.printServers.list"
                },
                "batchCreatePrintServers": {
                  "id": "admin.customers.chrome.printServers.batchCreatePrintServers",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "path": "admin/directory/v1/{+parent}/chrome/printServers:batchCreatePrintServers",
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
                      "pattern": "^customers/[^/]+$",
                      "required": true
                    }
                  },
                  "httpMethod": "POST",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers:batchCreatePrintServers",
                  "request": {
                    "$ref": "BatchCreatePrintServersRequest"
                  },
                  "response": {
                    "$ref": "BatchCreatePrintServersResponse"
                  },
                  "description": "Creates multiple print servers."
                },
                "get": {
                  "description": "Returns a print server's configuration.",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
                      "location": "path",
                      "pattern": "^customers/[^/]+/chrome/printServers/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "PrintServer"
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "path": "admin/directory/v1/{+name}",
                  "id": "admin.customers.chrome.printServers.get",
                  "httpMethod": "GET"
                },
                "create": {
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "PrintServer"
                  },
                  "id": "admin.customers.chrome.printServers.create",
                  "request": {
                    "$ref": "PrintServer"
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers",
                  "description": "Creates a print server.",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
                      "location": "path",
                      "required": true,
                      "pattern": "^customers/[^/]+$",
                      "type": "string"
                    }
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printServers"
                },
                "delete": {
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the print server to be deleted. Format: `customers/{customer.id}/chrome/printServers/{print_server.id}`",
                      "required": true,
                      "type": "string",
                      "pattern": "^customers/[^/]+/chrome/printServers/[^/]+$",
                      "location": "path"
                    }
                  },
                  "path": "admin/directory/v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes a print server.",
                  "httpMethod": "DELETE",
                  "id": "admin.customers.chrome.printServers.delete",
                  "response": {
                    "$ref": "Empty"
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ]
                }
              }
            },
            "printers": {
              "methods": {
                "batchDeletePrinters": {
                  "id": "admin.customers.chrome.printers.batchDeletePrinters",
                  "description": "Deletes printers in batch.",
                  "request": {
                    "$ref": "BatchDeletePrintersRequest"
                  },
                  "httpMethod": "POST",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:batchDeletePrinters",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Required. The name of the customer. Format: customers/{customer_id}",
                      "pattern": "^customers/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printers:batchDeletePrinters",
                  "response": {
                    "$ref": "BatchDeletePrintersResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "list": {
                  "id": "admin.customers.chrome.printers.list",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers",
                  "description": "List printers configs.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "orderBy": {
                      "description": "The order to sort results by. Must be one of display_name, description, make_and_model, or create_time. Default order is ascending, but descending order can be returned by appending \"desc\" to the order_by field. For instance, \"description desc\" will return the printers sorted by description in descending order.",
                      "location": "query",
                      "type": "string"
                    },
                    "orgUnitId": {
                      "location": "query",
                      "description": "Organization Unit that we want to list the printers for. When org_unit is not present in the request then all printers of the customer are returned (or filtered). When org_unit is present in the request then only printers available to this OU will be returned (owned or inherited). You may see if printer is owned or inherited for this OU by looking at Printer.org_unit_id.",
                      "type": "string"
                    },
                    "parent": {
                      "pattern": "^customers/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id}"
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "The maximum number of objects to return. The service may return fewer than this value.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "filter": {
                      "description": "Search query. Search syntax is shared between this api and Admin Console printers pages.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A page token, received from a previous call."
                    }
                  },
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListPrintersResponse"
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printers",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ]
                },
                "create": {
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers",
                  "path": "admin/directory/v1/{+parent}/chrome/printers",
                  "request": {
                    "$ref": "Printer"
                  },
                  "httpMethod": "POST",
                  "id": "admin.customers.chrome.printers.create",
                  "description": "Creates a printer under given Organization Unit.",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "pattern": "^customers/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the customer. Format: customers/{customer_id}"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "Printer"
                  }
                },
                "listPrinterModels": {
                  "httpMethod": "GET",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:listPrinterModels",
                  "description": "Lists the supported printer models.",
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "required": true,
                      "description": "Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id}",
                      "pattern": "^customers/[^/]+$",
                      "location": "path"
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "Filer to list only models by a given manufacturer in format: \"manufacturer:Brother\". Search syntax is shared between this api and Admin Console printers pages."
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A page token, received from a previous call."
                    },
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum number of objects to return. The service may return fewer than this value."
                    }
                  },
                  "response": {
                    "$ref": "ListPrinterModelsResponse"
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printers:listPrinterModels",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "id": "admin.customers.chrome.printers.listPrinterModels"
                },
                "delete": {
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "id": "admin.customers.chrome.printers.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "description": "Deletes a `Printer`.",
                  "httpMethod": "DELETE",
                  "response": {
                    "$ref": "Empty"
                  },
                  "path": "admin/directory/v1/{+name}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "description": "Required. The name of the printer to be updated. Format: customers/{customer_id}/chrome/printers/{printer_id}",
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "batchCreatePrinters": {
                  "response": {
                    "$ref": "BatchCreatePrintersResponse"
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:batchCreatePrinters",
                  "id": "admin.customers.chrome.printers.batchCreatePrinters",
                  "request": {
                    "$ref": "BatchCreatePrintersRequest"
                  },
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "Required. The name of the customer. Format: customers/{customer_id}",
                      "pattern": "^customers/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Creates printers under given Organization Unit.",
                  "httpMethod": "POST",
                  "path": "admin/directory/v1/{+parent}/chrome/printers:batchCreatePrinters",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ]
                },
                "patch": {
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Printer"
                  },
                  "request": {
                    "$ref": "Printer"
                  },
                  "parameters": {
                    "updateMask": {
                      "description": "The list of fields to be updated. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched.",
                      "format": "google-fieldmask",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$",
                      "type": "string",
                      "description": "The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)",
                      "location": "path",
                      "required": true
                    },
                    "clearMask": {
                      "location": "query",
                      "format": "google-fieldmask",
                      "description": "The list of fields to be cleared. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched.",
                      "type": "string"
                    }
                  },
                  "id": "admin.customers.chrome.printers.patch",
                  "description": "Updates a `Printer` resource.",
                  "httpMethod": "PATCH",
                  "path": "admin/directory/v1/{+name}"
                },
                "get": {
                  "response": {
                    "$ref": "Printer"
                  },
                  "id": "admin.customers.chrome.printers.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "Required. The name of the printer to retrieve. Format: customers/{customer_id}/chrome/printers/{printer_id}",
                      "type": "string",
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$",
                      "required": true
                    }
                  },
                  "description": "Returns a `Printer` resource (printer's config).",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "httpMethod": "GET",
                  "path": "admin/directory/v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ]
                }
              }
            }
          }
        }
      },
      "methods": {
        "patch": {
          "description": "Patches a customer.",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "path": "admin/directory/v1/customers/{customerKey}",
          "request": {
            "$ref": "Customer"
          },
          "id": "directory.customers.patch",
          "response": {
            "$ref": "Customer"
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "required": true,
              "location": "path",
              "type": "string"
            }
          }
        },
        "update": {
          "description": "Updates a customer.",
          "request": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "httpMethod": "PUT",
          "parameters": {
            "customerKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Id of the customer to be updated"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.get",
          "response": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Id of the customer to be retrieved"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Retrieves a customer."
        }
      }
    },
    "domains": {
      "methods": {
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "description": "Lists the domains of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        },
        "insert": {
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "description": "Inserts a domain of the customer.",
          "request": {
            "$ref": "Domains"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "response": {
            "$ref": "Domains"
          },
          "id": "directory.domains.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domains"
        },
        "get": {
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "response": {
            "$ref": "Domains"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "description": "Retrieves a domain of the customer.",
          "id": "directory.domains.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "domainName": {
              "location": "path",
              "type": "string",
              "description": "Name of domain to be retrieved",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "delete": {
          "id": "directory.domains.delete",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "domainName": {
              "type": "string",
              "description": "Name of domain to be deleted",
              "required": true,
              "location": "path"
            },
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ]
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "response": {
            "$ref": "MobileDevices"
          },
          "parameters": {
            "query": {
              "description": "Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/search-operators",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "orderBy": {
              "enumDescriptions": [
                "The serial number for a Google Sync mobile device. For Android devices, this is a software generated unique identifier.",
                "The device owner's email address.",
                "Last policy settings sync date time of the device.",
                "The mobile device's model.",
                "The device owner's user name.",
                "The device's operating system.",
                "The device status.",
                "Type of the device."
              ],
              "type": "string",
              "description": "Device property to use for sorting results.",
              "enum": [
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "maximum": "100",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "location": "query",
              "default": "100"
            },
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "id": "directory.mobiledevices.list",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all user-owned mobile devices for an account. To retrieve a list that includes company-owned devices, use the Cloud Identity [Devices API](https://cloud.google.com/identity/docs/concepts/overview-devices) instead."
        },
        "get": {
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            },
            "resourceId": {
              "required": true,
              "description": "The unique ID the API service uses to identify the mobile device.",
              "type": "string",
              "location": "path"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            }
          },
          "httpMethod": "GET",
          "id": "directory.mobiledevices.get",
          "description": "Retrieves a mobile device's properties.",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "response": {
            "$ref": "MobileDevice"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ]
        },
        "delete": {
          "parameters": {
            "resourceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The unique ID the API service uses to identify the mobile device."
            },
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Removes a mobile device.",
          "id": "directory.mobiledevices.delete",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "action": {
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Takes an action that affects a mobile device. For example, remotely wiping a device.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameters": {
            "resourceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The unique ID the API service uses to identify the mobile device."
            },
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          },
          "id": "directory.mobiledevices.action"
        }
      }
    },
    "groups": {
      "methods": {
        "insert": {
          "id": "directory.groups.insert",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups",
          "parameterOrder": [],
          "path": "admin/directory/v1/groups",
          "request": {
            "$ref": "Group"
          },
          "description": "Creates a group.",
          "httpMethod": "POST"
        },
        "list": {
          "id": "directory.groups.list",
          "response": {
            "$ref": "Groups"
          },
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "query",
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, fill in this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. Either the `customer` or the `domain` parameter must be provided."
            },
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "enum": [
                "email"
              ],
              "type": "string",
              "enumDescriptions": [
                "Email of the group."
              ]
            },
            "domain": {
              "location": "query",
              "description": "The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead.",
              "type": "string"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "default": "200"
            },
            "userKey": {
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string"
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ]
            }
          },
          "path": "admin/directory/v1/groups",
          "description": "Retrieves all groups of a domain or of a user given a userKey (paginated)."
        },
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.get",
          "description": "Retrieves a group's properties.",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string"
            }
          }
        },
        "patch": {
          "description": "Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "response": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.patch",
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "update": {
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path"
            }
          },
          "description": "Updates a group's properties.",
          "id": "directory.groups.update",
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "PUT",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          }
        },
        "delete": {
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.groups.delete",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Deletes a group.",
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameterOrder": [
            "groupKey"
          ]
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "description": "Lists all aliases for a group.",
              "parameterOrder": [
                "groupKey"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.list",
              "response": {
                "$ref": "Aliases"
              },
              "httpMethod": "GET",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
                }
              }
            },
            "delete": {
              "description": "Removes an alias.",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "id": "directory.groups.aliases.delete",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "groupKey": {
                  "location": "path",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "required": true,
                  "type": "string"
                }
              }
            },
            "insert": {
              "parameterOrder": [
                "groupKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "Adds an alias for the group.",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
                }
              },
              "request": {
                "$ref": "Alias"
              },
              "id": "directory.groups.aliases.insert"
            }
          }
        }
      }
    },
    "users": {
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "description": "Lists all aliases for a user.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Aliases"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "id": "directory.users.aliases.list",
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "event": {
                  "location": "query",
                  "enum": [
                    "add",
                    "delete"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "description": "Events to watch for."
                },
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              }
            },
            "insert": {
              "description": "Adds an alias.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.aliases.insert",
              "request": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              }
            },
            "delete": {
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true
                },
                "alias": {
                  "description": "The alias to be removed.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "description": "Removes an alias.",
              "id": "directory.users.aliases.delete",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}"
            },
            "watch": {
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "request": {
                "$ref": "Channel"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameters": {
                "event": {
                  "type": "string",
                  "enumDescriptions": [
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "add",
                    "delete"
                  ],
                  "location": "query",
                  "description": "Events to watch for."
                },
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "directory.users.aliases.watch",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "description": "Watches for changes in users list.",
              "httpMethod": "POST",
              "response": {
                "$ref": "Channel"
              }
            }
          }
        },
        "photos": {
          "methods": {
            "get": {
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Retrieves the user's photo.",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "GET",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "type": "string",
                  "required": true
                }
              },
              "id": "directory.users.photos.get"
            },
            "delete": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Removes the user's photo.",
              "id": "directory.users.photos.delete",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "update": {
              "description": "Adds a photo for the user.",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.update"
            },
            "patch": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "request": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "httpMethod": "PATCH",
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ]
            }
          }
        }
      },
      "methods": {
        "undelete": {
          "id": "directory.users.undelete",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "The immutable id of the user",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "description": "Undeletes a deleted user.",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "request": {
            "$ref": "UserUndelete"
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.delete",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "description": "Deletes a user.",
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "parameterOrder": [],
          "description": "Retrieves a paginated list of either deleted users or all users in a domain.",
          "flatPath": "admin/directory/v1/users",
          "httpMethod": "GET",
          "id": "directory.users.list",
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "projection": {
              "enum": [
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "type": "string"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order, ignoring case.",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users)."
            },
            "event": {
              "enumDescriptions": [
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "type": "string",
              "location": "query",
              "description": "Event on which subscription is intended (if subscribing)"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users). Either the `customer` or the `domain` parameter must be provided."
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided."
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "default": "100",
              "minimum": "1",
              "format": "int32",
              "maximum": "500",
              "description": "Maximum number of results to return."
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to `true`, retrieves the list of deleted users. (Default: `false`)"
            },
            "customFieldMask": {
              "location": "query",
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.",
              "type": "string"
            },
            "orderBy": {
              "location": "query",
              "description": "Property to use for sorting results.",
              "enumDescriptions": [
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string"
            },
            "viewType": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ]
            }
          },
          "response": {
            "$ref": "Users"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "admin/directory/v1/users"
        },
        "update": {
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          },
          "request": {
            "$ref": "User"
          },
          "id": "directory.users.update",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "path": "admin/directory/v1/users/{userKey}",
          "description": "Updates a user. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared."
        },
        "watch": {
          "parameterOrder": [],
          "parameters": {
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "description": "Column to use for sorting results"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "viewType": {
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "location": "query",
              "type": "string"
            },
            "customFieldMask": {
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "default": "basic",
              "type": "string",
              "enum": [
                "basic",
                "custom",
                "full"
              ]
            },
            "maxResults": {
              "format": "int32",
              "maximum": "500",
              "type": "integer",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "location": "query",
              "default": "100"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "event": {
              "enumDescriptions": [
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "description": "Events to watch for.",
              "type": "string",
              "enum": [
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "location": "query"
            }
          },
          "request": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/watch",
          "description": "Watches for changes in users list.",
          "id": "directory.users.watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory/v1/users/watch"
        },
        "patch": {
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.patch",
          "description": "Updates a user using patch semantics. The update method should be used instead, since it also supports patch semantics and has better performance. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "User"
          },
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Retrieves a user.",
          "id": "directory.users.get",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "default": "basic",
              "type": "string",
              "enum": [
                "basic",
                "custom",
                "full"
              ]
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`."
            },
            "viewType": {
              "type": "string",
              "default": "admin_view",
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "location": "query",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin)."
            }
          },
          "parameterOrder": [
            "userKey"
          ]
        },
        "insert": {
          "description": "Creates a user.",
          "parameters": {},
          "flatPath": "admin/directory/v1/users",
          "path": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert",
          "parameterOrder": [],
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "httpMethod": "POST"
        },
        "makeAdmin": {
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "id": "directory.users.makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "description": "Makes a user a super administrator."
        },
        "signOut": {
          "description": "Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "id": "directory.users.signOut",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "roles": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true
            },
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            }
          },
          "id": "directory.roles.get",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "GET",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Retrieves a role."
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "id": "directory.roles.list",
          "parameters": {
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "maximum": "100",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "format": "int32",
              "minimum": "1"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Roles"
          }
        },
        "insert": {
          "description": "Creates a role.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.insert",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "required": true
            }
          }
        },
        "patch": {
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "description": "Patches a role.",
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.patch",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "DELETE",
          "description": "Deletes a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete"
        },
        "update": {
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "Role"
          },
          "request": {
            "$ref": "Role"
          },
          "description": "Updates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.update"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.privileges.list"
        }
      }
    },
    "schemas": {
      "methods": {
        "patch": {
          "id": "directory.schemas.patch",
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            },
            "schemaKey": {
              "type": "string",
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "request": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Patches a schema.",
          "httpMethod": "PATCH"
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Creates a schema.",
          "id": "directory.schemas.insert",
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "POST"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.get",
          "description": "Retrieves a schema.",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account."
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "response": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "request": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.update",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "required": true
            },
            "customerId": {
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "description": "Updates a schema.",
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieves all schemas for a customer.",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "id": "directory.schemas.list",
          "httpMethod": "GET",
          "response": {
            "$ref": "Schemas"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE",
          "parameters": {
            "schemaKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name or immutable ID of the schema."
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "id": "directory.schemas.delete",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Deletes a schema.",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        }
      }
    },
    "orgunits": {
      "methods": {
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)",
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.patch",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID."
            },
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "list": {
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "response": {
            "$ref": "OrgUnits"
          },
          "parameters": {
            "type": {
              "enum": [
                "all",
                "children"
              ],
              "enumDescriptions": [
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "description": "Whether to return all sub-organizations or just immediate children.",
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "default": "",
              "location": "query",
              "type": "string",
              "description": "The full path to the organizational unit or its unique ID. Returns the children of the specified organizational unit."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieves a list of all organizational units for an account."
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            },
            "orgUnitPath": {
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID.",
              "pattern": "^.*$",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.delete",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Removes an organizational unit.",
          "httpMethod": "DELETE"
        },
        "update": {
          "description": "Updates an organizational unit.",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID.",
              "required": true,
              "pattern": "^.*$",
              "location": "path"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.update",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "PUT",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "insert": {
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.insert",
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Adds an organizational unit.",
          "httpMethod": "POST"
        },
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "location": "path"
            },
            "orgUnitPath": {
              "required": true,
              "pattern": "^.*$",
              "location": "path",
              "type": "string",
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID."
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Retrieves an organizational unit.",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ]
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "delete": {
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "id": "directory.roleAssignments.delete",
          "description": "Deletes a role assignment.",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "insert": {
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "request": {
            "$ref": "RoleAssignment"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.roleAssignments.insert",
          "description": "Creates a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "POST"
        },
        "get": {
          "id": "directory.roleAssignments.get",
          "description": "Retrieves a role assignment.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "location": "path"
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "response": {
            "$ref": "RoleAssignment"
          }
        },
        "list": {
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            },
            "roleId": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "maximum": "200"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "RoleAssignments"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all roleAssignments.",
          "id": "directory.roleAssignments.list"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "description": "Issues a command for the device to execute.",
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "parameters": {
                    "deviceId": {
                      "description": "Immutable. ID of Chrome OS Device.",
                      "location": "path",
                      "type": "string",
                      "required": true
                    },
                    "customerId": {
                      "description": "Immutable. ID of the Google Workspace account.",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "httpMethod": "POST"
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "parameters": {
                        "customerId": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "Immutable. ID of the Google Workspace account."
                        },
                        "commandId": {
                          "required": true,
                          "description": "Immutable. ID of Chrome OS Device Command.",
                          "type": "string",
                          "format": "int64",
                          "location": "path"
                        },
                        "deviceId": {
                          "description": "Immutable. ID of Chrome OS Device.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "description": "Gets command data a specific command issued to the device.",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "httpMethod": "GET"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "asps": {
      "methods": {
        "get": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Gets information about an ASP issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Asp"
          },
          "parameters": {
            "codeId": {
              "description": "The unique ID of the ASP.",
              "format": "int32",
              "required": true,
              "type": "integer",
              "location": "path"
            },
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "id": "directory.asps.get",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps",
          "description": "Lists the ASPs issued by a user.",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.asps.list",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Asps"
          }
        },
        "delete": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "DELETE",
          "id": "directory.asps.delete",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Deletes an ASP issued by a user.",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            },
            "codeId": {
              "location": "path",
              "required": true,
              "description": "The unique ID of the ASP to be deleted.",
              "type": "integer",
              "format": "int32"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "moveDevicesToOu": {
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "description": "Full path of the target organizational unit or its ID",
              "location": "query"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable. ID of the Google Workspace account"
            }
          }
        },
        "action": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "id": "directory.chromeosdevices.action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "httpMethod": "POST",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path"
            },
            "resourceId": {
              "description": "The unique ID of the device. The `resourceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "description": "Retrieves a Chrome OS device's properties.",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.get",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            },
            "deviceId": {
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "projection": {
              "type": "string",
              "description": "Determines whether the response contains the full list of properties or only a subset.",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "list": {
          "description": "Retrieves a paginated list of Chrome OS devices within an account.",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "projection": {
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "minimum": "1",
              "default": "100"
            },
            "orgUnitPath": {
              "description": "The full path of the organizational unit (minus the leading `/`) or its unique ID.",
              "location": "query",
              "type": "string"
            },
            "includeChildOrgunits": {
              "location": "query",
              "type": "boolean",
              "description": "Return devices from all child orgunits, as well as the specified org unit. If this is set to true, 'orgUnitPath' must be provided."
            },
            "sortOrder": {
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "The `pageToken` query parameter is used to request the next page of query results. The follow-on request's `pageToken` query parameter is the `nextPageToken` from your previous response.",
              "location": "query"
            },
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "Chrome device location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "The date and time the Chrome device was last synchronized with the policy settings in the Admin console.",
                "Chrome device notes as annotated by the administrator.",
                "The Chrome device serial number entered when the device was enabled.",
                "Chrome device status. For more information, see the \u003ca [chromeosdevices](/admin-sdk/directory/v1/reference/chromeosdevices.html)."
              ],
              "description": "Device property to use for sorting results.",
              "location": "query",
              "enum": [
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status"
              ]
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/list-query-operators"
            }
          },
          "id": "directory.chromeosdevices.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos"
        },
        "update": {
          "parameters": {
            "deviceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method."
            },
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          },
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.update",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "ChromeOsDevice"
          }
        },
        "patch": {
          "parameters": {
            "customerId": {
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "location": "path"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "location": "query",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "deviceId": {
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "id": "directory.chromeosdevices.patch",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "generate": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "id": "directory.verificationCodes.generate",
          "description": "Generates new backup verification codes for the user.",
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "id": "directory.verificationCodes.list",
          "response": {
            "$ref": "VerificationCodes"
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes"
        },
        "invalidate": {
          "id": "directory.verificationCodes.invalidate",
          "httpMethod": "POST",
          "description": "Invalidates the current backup verification codes for the user.",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string"
            }
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "DELETE",
          "id": "directory.tokens.delete",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "description": "Deletes all access tokens issued by a user for an application."
        },
        "list": {
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Tokens"
          },
          "id": "directory.tokens.list",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "get": {
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            },
            "clientId": {
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "id": "directory.tokens.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "httpMethod": "GET",
          "description": "Gets information about an access token issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "id": "directory.twoStepVerification.turnOff",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Turns off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff"
        }
      }
    },
    "resources": {
      "resources": {
        "calendars": {
          "methods": {
            "get": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "GET",
              "id": "directory.resources.calendars.get",
              "response": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a calendar resource.",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Patches a calendar resource.",
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.patch",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PATCH"
            },
            "delete": {
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to delete.",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.resources.calendars.delete",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.insert",
              "response": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "parameterOrder": [
                "customer"
              ]
            },
            "list": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.list",
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "maxResults": {
                  "maximum": "500",
                  "minimum": "1",
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "location": "query"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "orderBy": {
                  "location": "query",
                  "type": "string",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include `resourceId`, `resourceName`, `capacity`, `buildingId`, and `floorName`. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example `buildingId, capacity desc` would return results sorted first by `buildingId` in ascending order then by `capacity` in descending order."
                },
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include `generatedResourceName`, `name`, `buildingId`, `floor_name`, `capacity`, `featureInstances.feature.name`, `resourceEmail`, `resourceCategory`. For example `buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone`."
                }
              },
              "response": {
                "$ref": "CalendarResources"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of calendar resources for an account."
            },
            "update": {
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        },
        "features": {
          "methods": {
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Feature"
              },
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "id": "directory.resources.features.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "rename": {
              "httpMethod": "POST",
              "request": {
                "$ref": "FeatureRename"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "oldName": {
                  "type": "string",
                  "description": "The unique ID of the feature to rename.",
                  "required": true,
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.rename",
              "description": "Renames a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ]
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.update",
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to update.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Updates a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              }
            },
            "get": {
              "id": "directory.resources.features.get",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Feature"
              }
            },
            "list": {
              "response": {
                "$ref": "Features"
              },
              "id": "directory.resources.features.list",
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                },
                "maxResults": {
                  "format": "int32",
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "minimum": "1",
                  "location": "query",
                  "maximum": "500"
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Retrieves a list of features for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "description": "The unique ID of the feature to delete.",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete",
              "description": "Deletes a feature.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ]
            },
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PATCH",
              "description": "Patches a feature.",
              "request": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            }
          }
        },
        "buildings": {
          "methods": {
            "patch": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "buildingId": {
                  "location": "path",
                  "description": "The id of the building to update.",
                  "type": "string",
                  "required": true
                },
                "coordinatesSource": {
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "description": "Patches a building.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.patch",
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a building.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "description": "The id of the building to delete.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "DELETE",
              "id": "directory.resources.buildings.delete"
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the building to retrieve."
                },
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "description": "Retrieves a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.get"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Buildings"
              },
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Retrieves a list of buildings for an account.",
              "httpMethod": "GET",
              "id": "directory.resources.buildings.list",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "minimum": "1",
                  "maximum": "500",
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ]
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.update",
              "description": "Updates a building.",
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              }
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Inserts a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED"
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "POST",
              "id": "directory.resources.buildings.insert",
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "parameters": {},
          "description": "Stops watching resources through this channel.",
          "parameterOrder": [],
          "path": "admin/directory_v1/channels/stop",
          "request": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory_v1/channels/stop",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "admin.channels.stop"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "id": "directory.domainAliases.list",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "description": "Lists the domain aliases of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account."
            },
            "parentDomainName": {
              "location": "query",
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            }
          },
          "response": {
            "$ref": "DomainAliases"
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE",
          "id": "directory.domainAliases.delete",
          "parameters": {
            "domainAliasName": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name of domain alias to be retrieved."
            },
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "Deletes a domain Alias of the customer."
        },
        "get": {
          "id": "directory.domainAliases.get",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "domainAliasName": {
              "required": true,
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "location": "path"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Retrieves a domain alias of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "required": true
            }
          },
          "request": {
            "$ref": "DomainAlias"
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Inserts a domain alias of the customer.",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domainAliases.insert"
        }
      }
    },
    "members": {
      "methods": {
        "list": {
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Members"
          },
          "httpMethod": "GET",
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "includeDerivedMembership": {
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false.",
              "type": "boolean"
            },
            "roles": {
              "location": "query",
              "type": "string",
              "description": "The `roles` query parameter allows you to retrieve group members by role. Allowed values are `OWNER`, `MANAGER`, and `MEMBER`."
            },
            "maxResults": {
              "location": "query",
              "default": "200",
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list.",
              "type": "string"
            }
          },
          "id": "directory.members.list",
          "description": "Retrieves a paginated list of all members in a group.",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members"
        },
        "insert": {
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Adds a user to the specified group.",
          "id": "directory.members.insert",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "request": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Member"
          }
        },
        "get": {
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.get",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path"
            },
            "memberKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "description": "Retrieves a group member's properties.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "patch": {
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.patch",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "parameters": {
            "memberKey": {
              "type": "string",
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "required": true,
              "location": "path"
            },
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          }
        },
        "hasMember": {
          "parameters": {
            "memberKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            },
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "MembersHasMember"
          },
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested, but if nested, the `memberKey` and `groupKey` must be entities in the same domain or an `Invalid input` error is returned. To check for nested memberships that include entities outside of the group's domain, use the [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership) method in the Cloud Identity Groups API.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "id": "directory.members.hasMember"
        },
        "update": {
          "request": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "PUT",
          "id": "directory.members.update",
          "description": "Updates the membership of a user in the specified group.",
          "response": {
            "$ref": "Member"
          }
        },
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.members.delete",
          "description": "Removes a member from a group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path"
            },
            "memberKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "location": "path"
            }
          }
        }
      }
    }
  },
  "protocol": "rest",
  "basePath": "",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.chrome.printers": {
          "description": "See, add, edit, and permanently delete the printers that your organization can use with Chrome"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "See info about users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.chrome.printers.readonly": {
          "description": "See the printers that your organization can use with Chrome"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        }
      }
    }
  },
  "version": "directory_v1",
  "discoveryVersion": "v1",
  "parameters": {
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true"
    },
    "alt": {
      "default": "json",
      "type": "string",
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string",
      "location": "query"
    }
  },
  "ownerDomain": "google.com",
  "schemas": {
    "UserWebsite": {
      "description": "JSON template for a website entry.",
      "id": "UserWebsite",
      "properties": {
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Asp": {
      "id": "Asp",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#asp`.",
          "default": "admin#directory#asp"
        },
        "name": {
          "description": "The name of the application that the user, represented by their `userId`, entered when the ASP was created.",
          "type": "string"
        },
        "codeId": {
          "type": "integer",
          "description": "The unique ID of the ASP.",
          "format": "int32"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format."
        },
        "lastTimeUsed": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format."
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](https://support.google.com/a/answer/2537800#asp)."
    },
    "Printer": {
      "id": "Printer",
      "properties": {
        "description": {
          "description": "Editable. Description of printer.",
          "type": "string"
        },
        "makeAndModel": {
          "description": "Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response.",
          "type": "string"
        },
        "auxiliaryMessages": {
          "type": "array",
          "readOnly": true,
          "description": "Output only. Auxiliary messages about issues with the printer configuration if any.",
          "items": {
            "$ref": "AuxiliaryMessage"
          }
        },
        "displayName": {
          "type": "string",
          "description": "Editable. Name of printer."
        },
        "useDriverlessConfig": {
          "type": "boolean",
          "description": "Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored"
        },
        "uri": {
          "description": "Editable. Printer URI.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "Organization Unit that owns this printer (Only can be set during Printer creation)"
        },
        "id": {
          "type": "string",
          "description": "Id of the printer. (During printer creation leave empty)"
        },
        "name": {
          "description": "The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time when printer was created."
        }
      },
      "type": "object",
      "description": "Printer configuration."
    },
    "MembersHasMember": {
      "type": "object",
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember"
    },
    "Alias": {
      "id": "Alias",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "description": "JSON template for Alias object in Directory API."
    },
    "BatchDeletePrintersRequest": {
      "properties": {
        "printerIds": {
          "description": "A list of Printer.id that should be deleted. Max 100 at a time.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "Request for deleting existing printers in batch.",
      "id": "BatchDeletePrintersRequest"
    },
    "Channel": {
      "type": "object",
      "properties": {
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "params": {
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional. For example, `params.ttl` specifies the time-to-live in seconds for the notification channel, where the default is 2 hours and the maximum TTL is 2 days.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64",
          "type": "string"
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.",
          "type": "string",
          "default": "api#channel"
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        }
      },
      "description": "An notification channel used to watch for resource changes.",
      "id": "Channel"
    },
    "UserRelation": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserRelation",
      "description": "JSON template for a relation entry."
    },
    "CreatePrintServerRequest": {
      "type": "object",
      "id": "CreatePrintServerRequest",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`"
        },
        "printServer": {
          "description": "Required. A print server to create. If you want to place the print server under a specific organizational unit (OU), then populate the `org_unit_id`. Otherwise the print server is created under the root OU. The `org_unit_id` can be retrieved using the [Directory API](https://developers.google.com/admin-sdk/directory/v1/guides/manage-org-units).",
          "$ref": "PrintServer"
        }
      },
      "description": "Request for adding a new print server."
    },
    "PrintServer": {
      "type": "object",
      "id": "PrintServer",
      "description": "Configuration for a print server.",
      "properties": {
        "displayName": {
          "description": "Editable. Display name of the print server (as shown in the Admin console).",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "Editable. Print server URI."
        },
        "orgUnitId": {
          "type": "string",
          "description": "ID of the organization unit (OU) that owns this print server. This value can only be set when the print server is initially created. If it's not populated, the print server is placed under the root OU. The `org_unit_id` can be retrieved using the [Directory API](/admin-sdk/directory/reference/rest/v1/orgunits)."
        },
        "name": {
          "description": "Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Time when the print server was created.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "id": {
          "description": "Immutable. ID of the print server. Leave empty when creating.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Editable. Description of the print server (as shown in the Admin console)."
        }
      }
    },
    "ListPrintServersResponse": {
      "id": "ListPrintServersResponse",
      "type": "object",
      "properties": {
        "printServers": {
          "type": "array",
          "description": "List of print servers.",
          "items": {
            "$ref": "PrintServer"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` in a request to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      }
    },
    "Members": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "members": {
          "type": "array",
          "description": "A list of member objects.",
          "items": {
            "$ref": "Member"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "default": "admin#directory#members",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "type": "object",
      "id": "Members"
    },
    "BatchCreatePrintServersResponse": {
      "type": "object",
      "id": "BatchCreatePrintServersResponse",
      "properties": {
        "printServers": {
          "items": {
            "$ref": "PrintServer"
          },
          "description": "A list of successfully created print servers with their IDs populated.",
          "type": "array"
        },
        "failures": {
          "type": "array",
          "description": "A list of create failures. `PrintServer` IDs are not populated, as print servers were not created.",
          "items": {
            "$ref": "PrintServerFailureInfo"
          }
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns `true` if the role is a super admin role."
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#role`.",
          "default": "admin#directory#role",
          "type": "string"
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns `true` if this is a pre-defined system role."
        },
        "rolePrivileges": {
          "items": {
            "type": "object",
            "properties": {
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              },
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).",
                "type": "string"
              }
            }
          },
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "The set of privileges that are granted to this role.",
          "type": "array"
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string",
          "description": "Name of the role."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "ID of the role."
        }
      },
      "id": "Role"
    },
    "ListPrinterModelsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "printerModels": {
          "items": {
            "$ref": "PrinterModel"
          },
          "type": "array",
          "description": "Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time."
        }
      },
      "id": "ListPrinterModelsResponse",
      "description": "Response for listing allowed printer models.",
      "type": "object"
    },
    "Privilege": {
      "properties": {
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#privilege",
          "description": "The type of the API resource. This is always `admin#directory#privilege`.",
          "type": "string"
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).",
          "type": "string"
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        }
      },
      "id": "Privilege",
      "type": "object"
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        },
        "kind": {
          "default": "admin#directory#roles",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#roles`."
        },
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Schema": {
      "id": "Schema",
      "description": "The type of API resource. For Schema resources, this is always `admin#directory#schema`.",
      "properties": {
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "The ETag of the resource."
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "description": "A list of fields in the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "displayName": {
          "description": "Display name for the schema.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "schemaId": {
          "type": "string",
          "description": "The unique identifier of the schema (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema"
        }
      },
      "type": "object"
    },
    "UserName": {
      "id": "UserName",
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "The user's first name. Required when creating a user account."
        },
        "fullName": {
          "type": "string",
          "description": "The user's full name formed by concatenating the first and last name values."
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "The user's last name. Required when creating a user account."
        }
      }
    },
    "UserLocation": {
      "properties": {
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        }
      },
      "description": "JSON template for a location entry.",
      "type": "object",
      "id": "UserLocation"
    },
    "UserExternalId": {
      "type": "object",
      "id": "UserExternalId",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        }
      }
    },
    "UserGender": {
      "properties": {
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        }
      },
      "id": "UserGender",
      "type": "object"
    },
    "Users": {
      "type": "object",
      "id": "Users",
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#users",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "User"
          },
          "type": "array",
          "description": "A list of user objects."
        }
      }
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "type": "array",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          },
          "description": "Chrome OS devices to be moved to OU"
        }
      },
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object"
    },
    "UserLanguage": {
      "id": "UserLanguage",
      "description": "JSON template for a language entry.",
      "type": "object",
      "properties": {
        "languageCode": {
          "description": "ISO 639 string representation of a language. See [Language Codes](/admin-sdk/directory/v1/languages) for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. Illegal values cause `SchemaException`. If this is set, `customLanguage` can't be set.",
          "type": "string"
        },
        "preference": {
          "description": "Optional. If present, controls whether the specified `languageCode` is the user's preferred language. If `customLanguage` is set, this can't be set. Allowed values are `preferred` and `not_preferred`.",
          "type": "string"
        },
        "customLanguage": {
          "description": "Other language. User can provide their own language name if there is no corresponding ISO 639 language code. If this is set, `languageCode` can't be set.",
          "type": "string"
        }
      }
    },
    "UserPhone": {
      "type": "object",
      "description": "JSON template for a phone entry.",
      "id": "UserPhone",
      "properties": {
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      }
    },
    "PrinterModel": {
      "id": "PrinterModel",
      "properties": {
        "manufacturer": {
          "type": "string",
          "description": "Manufacturer. eq. \"Brother\""
        },
        "makeAndModel": {
          "type": "string",
          "description": "Make and model as represented in \"make_and_model\" field in Printer object. eq. \"brother mfc-8840d\""
        },
        "displayName": {
          "description": "Display name. eq. \"Brother MFC-8840D\"",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Printer manufacturer and model"
    },
    "FeatureInstance": {
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      },
      "description": "JSON template for a feature instance.",
      "id": "FeatureInstance",
      "type": "object"
    },
    "CalendarResource": {
      "description": "Public API: Resources.calendars",
      "properties": {
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource."
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "capacity": {
          "format": "int32",
          "type": "integer",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        }
      },
      "id": "CalendarResource",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "type": "object",
      "description": "A response for issuing a command."
    },
    "UserAddress": {
      "id": "UserAddress",
      "description": "JSON template for address.",
      "properties": {
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        }
      },
      "type": "object"
    },
    "UserAlias": {
      "id": "UserAlias",
      "description": "The Directory API manages aliases, which are alternative email addresses.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type of the API resource. For Alias resources, the value is `admin#directory#alias`.",
          "type": "string"
        },
        "alias": {
          "type": "string",
          "description": "The alias email address."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "primaryEmail": {
          "type": "string",
          "description": "The user's primary email address."
        },
        "id": {
          "description": "The unique ID for the user.",
          "type": "string"
        }
      }
    },
    "Features": {
      "description": "Public API: Resources.features",
      "id": "Features",
      "properties": {
        "features": {
          "description": "The Features in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Feature"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "PrintServerFailureInfo": {
      "type": "object",
      "description": "Info about failures",
      "properties": {
        "printServer": {
          "$ref": "PrintServer",
          "description": "Failed print server."
        },
        "errorMessage": {
          "description": "Failure reason message.",
          "type": "string"
        },
        "printServerId": {
          "type": "string",
          "description": "ID of a failed print server."
        },
        "errorCode": {
          "enum": [
            "OK",
            "CANCELLED",
            "UNKNOWN",
            "INVALID_ARGUMENT",
            "DEADLINE_EXCEEDED",
            "NOT_FOUND",
            "ALREADY_EXISTS",
            "PERMISSION_DENIED",
            "UNAUTHENTICATED",
            "RESOURCE_EXHAUSTED",
            "FAILED_PRECONDITION",
            "ABORTED",
            "OUT_OF_RANGE",
            "UNIMPLEMENTED",
            "INTERNAL",
            "UNAVAILABLE",
            "DATA_LOSS"
          ],
          "description": "Canonical code for why the update failed to apply.",
          "enumDescriptions": [
            "Not an error; returned on success. HTTP Mapping: 200 OK",
            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
          ],
          "type": "string"
        }
      },
      "id": "PrintServerFailureInfo"
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "id": "UserUndelete",
      "type": "object"
    },
    "OrgUnit": {
      "type": "object",
      "properties": {
        "parentOrgUnitId": {
          "description": "The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "The unique ID of the organizational unit."
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075)."
        },
        "orgUnitPath": {
          "type": "string",
          "description": "The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user)."
        },
        "parentOrgUnitPath": {
          "description": "The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "description": "The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required.",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.",
          "default": "admin#directory#orgUnit"
        },
        "description": {
          "type": "string",
          "description": "Description of the organizational unit."
        }
      },
      "id": "OrgUnit",
      "description": "Managing your account's organizational units allows you to configure your users' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-org-units.html). The customer's organizational unit hierarchy is limited to 35 levels of depth."
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID the API uses to uniquely identify the user."
        },
        "height": {
          "description": "Height of the photo in pixels.",
          "format": "int32",
          "type": "integer"
        },
        "photoData": {
          "description": "The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.",
          "type": "string",
          "format": "byte",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "primaryEmail": {
          "description": "The user's primary email address.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.",
          "type": "string",
          "default": "admin#directory#user#photo"
        },
        "width": {
          "description": "Width of the photo in pixels.",
          "type": "integer",
          "format": "int32"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding."
        }
      },
      "type": "object"
    },
    "FailureInfo": {
      "type": "object",
      "properties": {
        "printerId": {
          "description": "Id of a failed printer.",
          "type": "string"
        },
        "errorCode": {
          "enum": [
            "OK",
            "CANCELLED",
            "UNKNOWN",
            "INVALID_ARGUMENT",
            "DEADLINE_EXCEEDED",
            "NOT_FOUND",
            "ALREADY_EXISTS",
            "PERMISSION_DENIED",
            "UNAUTHENTICATED",
            "RESOURCE_EXHAUSTED",
            "FAILED_PRECONDITION",
            "ABORTED",
            "OUT_OF_RANGE",
            "UNIMPLEMENTED",
            "INTERNAL",
            "UNAVAILABLE",
            "DATA_LOSS"
          ],
          "enumDescriptions": [
            "Not an error; returned on success. HTTP Mapping: 200 OK",
            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
          ],
          "description": "Canonical code for why the update failed to apply.",
          "type": "string"
        },
        "errorMessage": {
          "type": "string",
          "description": "Failure reason message."
        },
        "printer": {
          "$ref": "Printer",
          "description": "Failed printer."
        }
      },
      "description": "Info about failures",
      "id": "FailureInfo"
    },
    "FeatureRename": {
      "type": "object",
      "properties": {
        "newName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature."
        }
      },
      "id": "FeatureRename"
    },
    "UserCustomProperties": {
      "additionalProperties": {
        "type": "any"
      },
      "id": "UserCustomProperties",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "type": "object"
    },
    "Tokens": {
      "description": "JSON response template for List tokens operation in Directory API.",
      "id": "Tokens",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#tokenList`.",
          "default": "admin#directory#tokenList",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Token"
          },
          "type": "array",
          "description": "A list of Token resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty"
    },
    "UserPosixAccount": {
      "id": "UserPosixAccount",
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "properties": {
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "uid": {
          "format": "uint64",
          "type": "string",
          "description": "The POSIX compliant user ID."
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        }
      }
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "properties": {
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "deviceFiles": {
          "description": "A list of device files to download (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "File type",
                "type": "string"
              },
              "name": {
                "description": "File name",
                "type": "string"
              },
              "createTime": {
                "format": "date-time",
                "description": "Date and time the file was created",
                "type": "string"
              },
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              }
            }
          }
        },
        "recentUsers": {
          "description": "A list of recent device users, in descending order, by last login time.",
          "items": {
            "properties": {
              "email": {
                "type": "string",
                "description": "The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`."
              },
              "type": {
                "description": "The type of the user.",
                "type": "string"
              }
            },
            "type": "object",
            "description": "A list of recent device users, in descending order, by last login time."
          },
          "type": "array"
        },
        "notes": {
          "description": "Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed.",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "format": "int64",
          "type": "string"
        },
        "annotatedLocation": {
          "description": "The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed.",
          "type": "string"
        },
        "screenshotFiles": {
          "items": {
            "type": "object",
            "properties": {
              "createTime": {
                "description": "Date and time the file was created",
                "type": "string",
                "format": "date-time"
              },
              "type": {
                "description": "File type",
                "type": "string"
              },
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "name": {
                "type": "string",
                "description": "File name"
              }
            }
          },
          "description": "A list of screenshot files to download. Type is always \"SCREENSHOT_FILE\". (Read-only)",
          "type": "array"
        },
        "orgUnitId": {
          "type": "string",
          "description": "The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path, orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433)."
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "orgUnitPath": {
          "description": "The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.",
          "type": "string"
        },
        "cpuInfo": {
          "description": "Information regarding CPU specs in the device.",
          "items": {
            "description": "CPU specs for a CPU.",
            "properties": {
              "maxClockSpeedKhz": {
                "type": "integer",
                "format": "int32",
                "description": "The max CPU clock speed in kHz."
              },
              "architecture": {
                "description": "The CPU architecture.",
                "type": "string"
              },
              "model": {
                "description": "The CPU model name.",
                "type": "string"
              },
              "logicalCpus": {
                "items": {
                  "description": "Status of a single logical CPU.",
                  "type": "object",
                  "properties": {
                    "cStates": {
                      "description": "C-States indicate the power consumption state of the CPU. For more information look at documentation published by the CPU maker.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "sessionDuration": {
                            "type": "string",
                            "format": "google-duration",
                            "description": "Time spent in the state since the last reboot."
                          },
                          "displayName": {
                            "description": "Name of the state.",
                            "type": "string"
                          }
                        },
                        "description": "Status of a single C-state. C-states are various modes the CPU can transition to in order to use more or less power."
                      }
                    },
                    "currentScalingFrequencyKhz": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Current frequency the CPU is running at."
                    },
                    "idleDuration": {
                      "type": "string",
                      "format": "google-duration",
                      "description": "Idle time since last boot."
                    },
                    "maxScalingFrequencyKhz": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Maximum frequency the CPU is allowed to run at, by policy."
                    }
                  }
                },
                "type": "array",
                "description": "Information for the Logical CPUs"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "activeTimeRanges": {
          "description": "A list of active time ranges (Read-only).",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "activeTime": {
                "description": "Duration of usage in milliseconds.",
                "type": "integer",
                "format": "int32"
              },
              "date": {
                "type": "string",
                "description": "Date of usage",
                "format": "date"
              }
            }
          }
        },
        "willAutoRenew": {
          "description": "Determines if the device will auto renew its support after the support end date. This is a read-only property.",
          "type": "boolean"
        },
        "firmwareVersion": {
          "type": "string",
          "description": "The Chrome device's firmware version."
        },
        "osVersion": {
          "description": "The Chrome device's operating system version.",
          "type": "string"
        },
        "firstEnrollmentTime": {
          "description": "Date and time for the first time the device was enrolled.",
          "type": "string"
        },
        "systemRamFreeReports": {
          "items": {
            "type": "object",
            "properties": {
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              },
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              }
            }
          },
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "bootMode": {
          "type": "string",
          "description": "The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch)."
        },
        "deviceId": {
          "description": "The unique ID of the Chrome device.",
          "type": "string"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "The device's MAC address on the ethernet network interface."
        },
        "orderNumber": {
          "description": "The device's order number. Only devices directly purchased from Google have an order number.",
          "type": "string"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "items": {
            "description": "Information for an ip address.",
            "properties": {
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              },
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "annotatedAssetId": {
          "description": "The asset identifier as noted by an administrator or specified during enrollment.",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab."
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "type": "string",
          "format": "int64"
        },
        "diskVolumeReports": {
          "items": {
            "properties": {
              "volumeInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "storageFree": {
                      "format": "int64",
                      "type": "string",
                      "description": "Free disk space [in bytes]"
                    },
                    "storageTotal": {
                      "format": "int64",
                      "type": "string",
                      "description": "Total disk space [in bytes]"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    }
                  }
                },
                "type": "array",
                "description": "Disk volumes"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "annotatedUser": {
          "type": "string",
          "description": "The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed."
        },
        "macAddress": {
          "description": "The device's wireless MAC address. If the device does not have this information, it is not included in the response.",
          "type": "string"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "supportEndDate": {
          "description": "Final date the device will be supported (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "model": {
          "type": "string",
          "description": "The device's model information. If the device does not have this information, this property is not included in the response."
        },
        "status": {
          "type": "string",
          "description": "The status of the device."
        },
        "platformVersion": {
          "type": "string",
          "description": "The Chrome device's platform version."
        },
        "meid": {
          "type": "string",
          "description": "The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid)."
        },
        "tpmVersionInfo": {
          "properties": {
            "specLevel": {
              "type": "string",
              "description": "TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "family": {
              "description": "TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: \"1.2\" -\u003e 312e3200 TPM 2.0: \"2.0\" -\u003e 322e3000",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            }
          },
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "osUpdateStatus": {
          "description": "The status of the OS updates for the device.",
          "$ref": "OsUpdateStatus"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "cpuTemperatureInfo": {
                "type": "array",
                "description": "A list of CPU temperature samples.",
                "items": {
                  "type": "object",
                  "properties": {
                    "temperature": {
                      "format": "int32",
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer"
                    },
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    }
                  }
                }
              }
            }
          },
          "type": "array"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "description": "Date and time the device was last enrolled (Read-only)",
          "type": "string"
        }
      },
      "description": "Google Chrome devices run on the [Chrome OS](https://support.google.com/chromeos). For more information about common API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).",
      "type": "object"
    },
    "CalendarResources": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "CalendarResource"
          },
          "description": "The CalendarResources in this page of results."
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`."
        }
      },
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars",
      "type": "object"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "id": "Aliases",
      "properties": {
        "etag": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      },
      "type": "object"
    },
    "RoleAssignments": {
      "properties": {
        "kind": {
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always `admin#directory#roleAssignments`.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources."
        }
      },
      "id": "RoleAssignments",
      "type": "object"
    },
    "MobileDeviceAction": {
      "type": "object",
      "properties": {
        "action": {
          "description": "The action to be performed on the device.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      },
      "id": "MobileDeviceAction"
    },
    "UserKeyword": {
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "id": "UserKeyword"
    },
    "BuildingCoordinates": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      },
      "id": "BuildingCoordinates"
    },
    "Building": {
      "type": "object",
      "id": "Building",
      "properties": {
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "floorNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are required."
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings"
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Indicates the administrator status of the user.",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          }
        }
      }
    },
    "BatchDeletePrintServersResponse": {
      "properties": {
        "failedPrintServers": {
          "type": "array",
          "description": "A list of update failures.",
          "items": {
            "$ref": "PrintServerFailureInfo"
          }
        },
        "printServerIds": {
          "description": "A list of print server IDs that were successfully deleted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "BatchDeletePrintServersResponse"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "result": {
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "type": "string",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "description": "The result of the command."
        },
        "executeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command was executed or failed to execute."
        },
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        }
      },
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object",
      "description": "The result of executing a command."
    },
    "DirectoryChromeosdevicesCommand": {
      "type": "object",
      "properties": {
        "commandId": {
          "description": "Unique ID of a device command.",
          "format": "int64",
          "type": "string"
        },
        "issueTime": {
          "type": "string",
          "description": "The timestamp when the command was issued by the admin.",
          "format": "google-datetime"
        },
        "commandResult": {
          "description": "The result of the command execution.",
          "$ref": "DirectoryChromeosdevicesCommandResult"
        },
        "commandExpireTime": {
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "type": "string",
          "description": "Indicates the command state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ]
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        },
        "type": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of the command."
        }
      },
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand"
    },
    "Groups": {
      "id": "Groups",
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#groups",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "groups": {
          "items": {
            "$ref": "Group"
          },
          "description": "A list of group objects.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "OrgUnits": {
      "type": "object",
      "id": "OrgUnits",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "organizationUnits": {
          "type": "array",
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "A list of organizational unit objects."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnits",
          "description": "The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`."
        }
      }
    },
    "BatchDeletePrintersResponse": {
      "type": "object",
      "description": "Response for deleting existing printers in batch.",
      "properties": {
        "printerIds": {
          "description": "A list of Printer.id that were successfully deleted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "failedPrinters": {
          "items": {
            "$ref": "FailureInfo"
          },
          "type": "array",
          "description": "A list of update failures."
        }
      },
      "id": "BatchDeletePrintersResponse"
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "A list of domain alias objects.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "Privileges": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#privileges",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#privileges`."
        },
        "items": {
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Privileges"
    },
    "DomainAlias": {
      "type": "object",
      "id": "DomainAlias",
      "properties": {
        "creationTime": {
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "parentDomainName": {
          "type": "string",
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAlias",
          "description": "Kind of resource this is."
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        }
      }
    },
    "BuildingAddress": {
      "properties": {
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address.",
          "type": "array"
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress"
    },
    "ListPrintersResponse": {
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "printers": {
          "description": "List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was not given in the request, then all printers will be returned.",
          "type": "array",
          "items": {
            "$ref": "Printer"
          }
        }
      },
      "type": "object",
      "id": "ListPrintersResponse",
      "description": "Response for listing printers."
    },
    "MobileDevices": {
      "id": "MobileDevices",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "mobiledevices": {
          "description": "A list of Mobile Device objects.",
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "CustomerPostalAddress": {
      "type": "object",
      "id": "CustomerPostalAddress",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is `NY` for the state of New York."
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of `San Francisco`."
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "countryCode": {
          "description": "This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm).",
          "type": "string"
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        }
      }
    },
    "Buildings": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "buildings": {
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Buildings"
    },
    "UserSshPublicKey": {
      "properties": {
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "expirationTimeUsec": {
          "format": "int64",
          "description": "An expiration time in microseconds since epoch.",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        }
      },
      "id": "UserSshPublicKey",
      "description": "JSON template for a POSIX account entry.",
      "type": "object"
    },
    "RoleAssignment": {
      "description": "Defines an assignment of a role.",
      "type": "object",
      "properties": {
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#roleAssignment`.",
          "default": "admin#directory#roleAssignment",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleAssignmentId": {
          "type": "string",
          "description": "ID of this roleAssignment.",
          "format": "int64"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the entity this role is assigned to—either the `user_id` of a user or the `uniqueId` of a service account, as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts)."
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned."
        }
      },
      "id": "RoleAssignment"
    },
    "UserIm": {
      "properties": {
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user."
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "properties": {
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "type": "string",
          "description": "The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`."
        },
        "numericIndexingSpec": {
          "properties": {
            "minValue": {
              "format": "double",
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "maxValue": {
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number",
              "format": "double"
            }
          },
          "type": "object",
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported."
        },
        "etag": {
          "description": "The ETag of the field.",
          "type": "string"
        },
        "fieldId": {
          "description": "The unique identifier of the field (Read-only)",
          "type": "string"
        },
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "The type of the field.",
          "type": "string"
        },
        "multiValued": {
          "description": "A boolean specifying whether this is a multi-valued field or not. Default: `false`.",
          "type": "boolean"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "description": "Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.",
          "type": "string"
        },
        "indexed": {
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not. Default: `true`.",
          "type": "boolean"
        },
        "fieldName": {
          "description": "The name of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        }
      },
      "description": "You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        },
        "commandType": {
          "description": "The type of command.",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "type": "string",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ]
        }
      },
      "description": "A request for issuing a command."
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "description": "Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers.",
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the Chrome OS device.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        }
      },
      "id": "ChromeOsDeviceAction",
      "description": "Data about an update to the status of a Chrome OS device.",
      "type": "object"
    },
    "Domains": {
      "type": "object",
      "id": "Domains",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "creationTime": {
          "description": "Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "domainAliases": {
          "description": "A list of domain alias objects. (Read-only)",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#domain",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        }
      }
    },
    "Customer": {
      "id": "Customer",
      "properties": {
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format."
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`"
        },
        "kind": {
          "type": "string",
          "description": "Identifies the resource as a customer. Value: `admin#directory#customer`",
          "default": "admin#directory#customer"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`."
        },
        "customerCreationTime": {
          "description": "The customer's creation time (Readonly)",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The unique ID for the customer's Google Workspace account. (Readonly)",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the `www` prefix when creating a new customer."
        }
      },
      "type": "object"
    },
    "BatchDeletePrintServersRequest": {
      "id": "BatchDeletePrintServersRequest",
      "description": "Request to delete multiple existing print servers in a batch.",
      "type": "object",
      "properties": {
        "printServerIds": {
          "description": "A list of print server IDs that should be deleted (max `100` per batch).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Asps": {
      "type": "object",
      "id": "Asps",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#aspList`.",
          "type": "string",
          "default": "admin#directory#aspList"
        },
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources.",
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "MobileDevice": {
      "properties": {
        "imei": {
          "type": "string",
          "description": "The device's IMEI number."
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "The device's serial number.",
          "type": "string"
        },
        "securityPatchLevel": {
          "format": "int64",
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "description": "The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier.",
          "type": "string"
        },
        "userAgent": {
          "description": "Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not."
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the device."
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "The device's status.",
          "type": "string"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of the owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method."
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "firstSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "buildNumber": {
          "description": "The device's operating system build number.",
          "type": "string"
        },
        "os": {
          "description": "The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
          "type": "string"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "kind": {
          "description": "The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.",
          "default": "admin#directory#mobiledevice",
          "type": "string"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "hardwareId": {
          "type": "string",
          "description": "The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property."
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user)."
        },
        "model": {
          "description": "The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).",
          "type": "string"
        },
        "type": {
          "description": "The type of mobile device.",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "The device's MEID number."
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "otherAccountsInfo": {
          "description": "The list of accounts added on device (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID the API service uses to identify the mobile device."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "The compromised device status."
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "applications": {
          "items": {
            "type": "object",
            "properties": {
              "displayName": {
                "description": "The application's display name. An example is `Browser`.",
                "type": "string"
              },
              "packageName": {
                "type": "string",
                "description": "The application's package name. An example is `com.android.browser`."
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`."
              },
              "versionName": {
                "description": "The application's version name. An example is `3.2-140714`.",
                "type": "string"
              },
              "versionCode": {
                "type": "integer",
                "format": "int32",
                "description": "The application's version code. An example is `13`."
              }
            }
          },
          "type": "array",
          "description": "The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications."
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "wifiMacAddress": {
          "description": "The device's MAC address on Wi-Fi networks.",
          "type": "string"
        },
        "basebandVersion": {
          "description": "The device's baseband version.",
          "type": "string"
        },
        "kernelVersion": {
          "type": "string",
          "description": "The device's kernel version."
        }
      },
      "type": "object",
      "id": "MobileDevice",
      "description": "Google Workspace Mobile Management includes Android, [Google Sync](https://support.google.com/a/answer/135937), and iOS devices. For more information about common group mobile device API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html)."
    },
    "Domains2": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domains"
        },
        "domains": {
          "description": "A list of domain objects.",
          "items": {
            "$ref": "Domains"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Domains2",
      "type": "object"
    },
    "Token": {
      "id": "Token",
      "description": "JSON template for token resource in Directory API.",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "description": "A list of authorization scopes the application is granted.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#token`.",
          "default": "admin#directory#token"
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        }
      },
      "type": "object"
    },
    "BatchCreatePrintersRequest": {
      "description": "Request for adding new printers in batch.",
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "description": "A list of Printers to be created. Max 50 at a time.",
          "items": {
            "$ref": "CreatePrinterRequest"
          }
        }
      },
      "id": "BatchCreatePrintersRequest"
    },
    "Feature": {
      "id": "Feature",
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#Feature"
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "UserAbout": {
      "id": "UserAbout",
      "properties": {
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        },
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        }
      },
      "type": "object",
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "ChromeOsDevices": {
      "type": "object",
      "id": "ChromeOsDevices",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request."
        },
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "chromeosdevices": {
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "A list of Chrome OS Device objects."
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "websites": {
          "type": "any",
          "description": "The user's websites. The maximum allowed data size for this field is 2Kb."
        },
        "kind": {
          "type": "string",
          "readOnly": true,
          "default": "admin#directory#user",
          "description": "Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`."
        },
        "gender": {
          "description": "The user's gender. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "hashFunction": {
          "type": "string",
          "description": "Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer."
        },
        "relations": {
          "description": "The list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "isEnrolledIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true
        },
        "agreedToTerms": {
          "type": "boolean",
          "description": "Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement.",
          "readOnly": true
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "includeInGlobalAddressList": {
          "description": "Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).",
          "type": "boolean"
        },
        "primaryEmail": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user."
        },
        "nonEditableAliases": {
          "description": "Output only. The list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "password": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password"
        },
        "keywords": {
          "description": "The list of the user's keywords. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "languages": {
          "type": "any",
          "description": "The user's languages. The maximum allowed data size for this field is 1Kb."
        },
        "posixAccounts": {
          "type": "any",
          "description": "The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user."
        },
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "isMailboxSetup": {
          "description": "Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.",
          "type": "boolean",
          "readOnly": true
        },
        "changePasswordAtNextLogin": {
          "description": "Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224).",
          "type": "boolean"
        },
        "phones": {
          "type": "any",
          "description": "The list of the user's phone numbers. The maximum allowed data size for this field is 1Kb."
        },
        "aliases": {
          "description": "Output only. The list of the user's alias email addresses.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "description": "Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).",
          "readOnly": true
        },
        "customerId": {
          "description": "Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.",
          "type": "string",
          "readOnly": true
        },
        "externalIds": {
          "description": "The list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "etag": {
          "readOnly": true,
          "description": "Output only. ETag of the resource.",
          "type": "string"
        },
        "suspensionReason": {
          "type": "string",
          "description": "Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.",
          "readOnly": true
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "A list of SSH public keys."
        },
        "lastLoginTime": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "User's last login time. (Read-only)"
        },
        "notes": {
          "type": "any",
          "description": "Notes for the user."
        },
        "ims": {
          "type": "any",
          "description": "The list of the user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2Kb."
        },
        "organizations": {
          "type": "any",
          "description": "The list of organizations the user belongs to. The maximum allowed data size for this field is 10Kb."
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "If `true`, the user's IP address is [whitelisted](https://support.google.com/a/answer/60752)."
        },
        "addresses": {
          "description": "The list of the user's addresses. The maximum allowed data size for this field is 10Kb.",
          "type": "any"
        },
        "deletionTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`)."
        },
        "locations": {
          "description": "The user's locations. The maximum allowed data size for this field is 10Kb.",
          "type": "any"
        },
        "id": {
          "description": "The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.",
          "type": "string"
        },
        "customSchemas": {
          "type": "object",
          "description": "Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "creationTime": {
          "description": "User's G Suite account creation time. (Read-only)",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "emails": {
          "description": "The list of the user's email addresses. The maximum allowed data size for this field is 10Kb.",
          "type": "any"
        },
        "name": {
          "description": "Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information about character usage rules, see the [administration help center](https://support.google.com/a/answer/9193374). Maximum allowed data size for this field is 1Kb.",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName"
        },
        "isAdmin": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service."
        }
      },
      "id": "User",
      "description": "The Directory API allows you to create and manage your account's users, user aliases, and user Gmail chat profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html)."
    },
    "UserOrganization": {
      "id": "UserOrganization",
      "type": "object",
      "description": "JSON template for an organization entry.",
      "properties": {
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "type": "integer",
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        }
      }
    },
    "GroupAlias": {
      "type": "object",
      "id": "GroupAlias",
      "properties": {
        "primaryEmail": {
          "description": "The primary email address of the group.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "alias": {
          "type": "string",
          "description": "The alias email address."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Alias resources, the value is `admin#directory#alias`."
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the group."
        }
      },
      "description": "The Directory API manages aliases, which are alternative email addresses."
    },
    "Member": {
      "type": "object",
      "id": "Member",
      "description": "A Google Groups member can be a user or another group. This member can be inside or outside of your account's domains. For more information about common group member tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-group-members).",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Members resources, the value is `admin#directory#member`.",
          "default": "admin#directory#member"
        },
        "type": {
          "description": "The type of group member.",
          "type": "string"
        },
        "role": {
          "type": "string",
          "description": "The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member's role, see the [administration help center](https://support.google.com/a/answer/167094)."
        },
        "email": {
          "type": "string",
          "description": "The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "delivery_settings": {
          "description": "Defines mail delivery preferences of member. This is only supported by create/update/get.",
          "type": "string"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`.",
          "type": "string"
        }
      }
    },
    "BatchCreatePrintServersRequest": {
      "description": "Request to add multiple new print servers in a batch.",
      "properties": {
        "requests": {
          "description": "Required. A list of `PrintServer` resources to be created (max `50` per batch).",
          "items": {
            "$ref": "CreatePrintServerRequest"
          },
          "type": "array"
        }
      },
      "id": "BatchCreatePrintServersRequest",
      "type": "object"
    },
    "VerificationCode": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the resource. This is always `admin#directory#verificationCode`.",
          "default": "admin#directory#verificationCode"
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "The Directory API allows you to view, generate, and invalidate backup verification codes for a user.",
      "id": "VerificationCode",
      "type": "object"
    },
    "UserEmail": {
      "description": "JSON template for an email.",
      "type": "object",
      "properties": {
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "id": "UserEmail"
    },
    "Schemas": {
      "id": "Schemas",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "description": "A list of UserSchema objects.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#schemas",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "description": "JSON response template for List Schema operation in Directory API."
    },
    "OsUpdateStatus": {
      "description": "Contains information regarding the current OS update status.",
      "id": "OsUpdateStatus",
      "type": "object",
      "properties": {
        "updateTime": {
          "type": "string",
          "description": "Date and time of the last successful OS update."
        },
        "targetOsVersion": {
          "type": "string",
          "description": "New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy \"0.0.0.0\" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot."
        },
        "targetKioskAppVersion": {
          "description": "New required platform version from the pending updated kiosk app.",
          "type": "string"
        },
        "rebootTime": {
          "type": "string",
          "description": "Date and time of the last reboot."
        },
        "state": {
          "enumDescriptions": [
            "The update state is unspecified.",
            "There is an update pending but it hasn't started.",
            "The pending update is being downloaded.",
            "The device is ready to install the update, but must reboot."
          ],
          "type": "string",
          "enum": [
            "updateStateUnspecified",
            "updateStateNotStarted",
            "updateStateDownloadInProgress",
            "updateStateNeedReboot"
          ],
          "description": "The update state of an OS update."
        },
        "updateCheckTime": {
          "description": "Date and time of the last update check.",
          "type": "string"
        }
      }
    },
    "CreatePrinterRequest": {
      "type": "object",
      "properties": {
        "printer": {
          "description": "Required. A printer to create. If you want to place the printer under particular OU then populate printer.org_unit_id filed. Otherwise the printer will be placed under root OU.",
          "$ref": "Printer"
        },
        "parent": {
          "type": "string",
          "description": "Required. The name of the customer. Format: customers/{customer_id}"
        }
      },
      "id": "CreatePrinterRequest",
      "description": "Request for adding a new printer."
    },
    "AuxiliaryMessage": {
      "type": "object",
      "id": "AuxiliaryMessage",
      "description": "Auxiliary message about issues with printers or settings. Example: {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model, message:\"Given printer is invalid or no longer supported.\"}",
      "properties": {
        "auxiliaryMessage": {
          "description": "Human readable message in English. Example: \"Given printer is invalid or no longer supported.\"",
          "type": "string"
        },
        "fieldMask": {
          "format": "google-fieldmask",
          "type": "string",
          "description": "Field that this message concerns."
        },
        "severity": {
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "SEVERITY_INFO",
            "SEVERITY_WARNING",
            "SEVERITY_ERROR"
          ],
          "enumDescriptions": [
            "Message type unspecified.",
            "Message of severity: info.",
            "Message of severity: warning.",
            "Message of severity: error."
          ],
          "description": "Message severity"
        }
      }
    },
    "Group": {
      "id": "Group",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Read-only. The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`."
        },
        "email": {
          "description": "The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details.",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The group's display name."
        },
        "directMembersCount": {
          "type": "string",
          "description": "The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group.",
          "format": "int64"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Read-only. The list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored."
        },
        "aliases": {
          "type": "array",
          "description": "Read-only. The list of a group's alias email addresses. To add, update, or remove a group's aliases, use the `groups.aliases` methods. If edited in a group's POST or PUT request, the edit is ignored.",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters."
        },
        "kind": {
          "description": "The type of the API resource. For Groups resources, the value is `admin#directory#group`.",
          "type": "string",
          "default": "admin#directory#group"
        },
        "adminCreated": {
          "description": "Read-only. Value is `true` if this group was created by an administrator rather than a user.",
          "type": "boolean"
        }
      },
      "description": "Google Groups provide your users the ability to send messages to groups of people using the group's email address. For more information about common tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-groups)."
    },
    "VerificationCodes": {
      "type": "object",
      "id": "VerificationCodes",
      "description": "JSON response template for list verification codes operation in Directory API.",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#verificationCodesList",
          "type": "string",
          "description": "The type of the resource. This is always `admin#directory#verificationCodesList`."
        },
        "items": {
          "description": "A list of verification code resources.",
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array"
        }
      }
    },
    "BatchCreatePrintersResponse": {
      "properties": {
        "failures": {
          "items": {
            "$ref": "FailureInfo"
          },
          "type": "array",
          "description": "A list of create failures. Printer IDs are not populated, as printer were not created."
        },
        "printers": {
          "description": "A list of successfully created printers with their IDs populated.",
          "items": {
            "$ref": "Printer"
          },
          "type": "array"
        }
      },
      "id": "BatchCreatePrintersResponse",
      "type": "object",
      "description": "Response for adding new printers in batch."
    }
  },
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "mtlsRootUrl": "https://admin.mtls.googleapis.com/",
  "kind": "discovery#restDescription",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "rootUrl": "https://admin.googleapis.com/"
}
