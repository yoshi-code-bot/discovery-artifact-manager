{
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "schemas": {
    "PropertyReference": {
      "properties": {
        "name": {
          "description": "The name of the property. If name includes \".\"s, it may be interpreted as a property name path.",
          "type": "string"
        }
      },
      "description": "A reference to a property relative to the kind expressions.",
      "id": "PropertyReference",
      "type": "object"
    },
    "GoogleDatastoreAdminV1CommonMetadata": {
      "id": "GoogleDatastoreAdminV1CommonMetadata",
      "properties": {
        "operationType": {
          "description": "The type of the operation. Can be used as a filter in ListOperationsRequest.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "ExportEntities.",
            "ImportEntities.",
            "CreateIndex.",
            "DeleteIndex."
          ],
          "enum": [
            "OPERATION_TYPE_UNSPECIFIED",
            "EXPORT_ENTITIES",
            "IMPORT_ENTITIES",
            "CREATE_INDEX",
            "DELETE_INDEX"
          ]
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The client-assigned labels which were provided when the operation was created. May also include additional labels.",
          "type": "object"
        },
        "state": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The current state of the Operation.",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ]
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time the operation ended, either successfully or otherwise."
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time that work began on the operation."
        }
      },
      "description": "Metadata common to all Datastore Admin operations.",
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1CommonMetadata": {
      "properties": {
        "startTime": {
          "type": "string",
          "description": "The time that work began on the operation.",
          "format": "google-datetime"
        },
        "operationType": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "ExportEntities.",
            "ImportEntities."
          ],
          "description": "The type of the operation. Can be used as a filter in ListOperationsRequest.",
          "enum": [
            "OPERATION_TYPE_UNSPECIFIED",
            "EXPORT_ENTITIES",
            "IMPORT_ENTITIES"
          ]
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The current state of the Operation."
        },
        "labels": {
          "description": "The client-assigned labels which were provided when the operation was created. May also include additional labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "endTime": {
          "description": "The time the operation ended, either successfully or otherwise.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "GoogleDatastoreAdminV1beta1CommonMetadata",
      "description": "Metadata common to all Datastore Admin operations.",
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata": {
      "properties": {
        "inputUrl": {
          "description": "The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field.",
          "type": "string"
        },
        "common": {
          "description": "Metadata common to all Datastore Admin operations.",
          "$ref": "GoogleDatastoreAdminV1beta1CommonMetadata"
        },
        "progressBytes": {
          "$ref": "GoogleDatastoreAdminV1beta1Progress",
          "description": "An estimate of the number of bytes processed."
        },
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1beta1EntityFilter",
          "description": "Description of which entities are being imported."
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1beta1Progress",
          "description": "An estimate of the number of entities processed."
        }
      },
      "type": "object",
      "description": "Metadata for ImportEntities operations.",
      "id": "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata"
    },
    "GoogleDatastoreAdminV1IndexOperationMetadata": {
      "type": "object",
      "id": "GoogleDatastoreAdminV1IndexOperationMetadata",
      "properties": {
        "common": {
          "$ref": "GoogleDatastoreAdminV1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "indexId": {
          "description": "The index resource ID that this operation is acting on.",
          "type": "string"
        },
        "progressEntities": {
          "description": "An estimate of the number of entities processed.",
          "$ref": "GoogleDatastoreAdminV1Progress"
        }
      },
      "description": "Metadata for Index operations."
    },
    "ReserveIdsResponse": {
      "id": "ReserveIdsResponse",
      "description": "The response for Datastore.ReserveIds.",
      "properties": {},
      "type": "object"
    },
    "LookupResponse": {
      "type": "object",
      "id": "LookupResponse",
      "properties": {
        "deferred": {
          "type": "array",
          "description": "A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.",
          "items": {
            "$ref": "Key"
          }
        },
        "missing": {
          "items": {
            "$ref": "EntityResult"
          },
          "description": "Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.",
          "type": "array"
        },
        "readTime": {
          "description": "The time at which these entities were read or found missing.",
          "type": "string",
          "format": "google-datetime"
        },
        "found": {
          "items": {
            "$ref": "EntityResult"
          },
          "description": "Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.",
          "type": "array"
        }
      },
      "description": "The response for Datastore.Lookup."
    },
    "GoogleDatastoreAdminV1RedirectWritesStepDetails": {
      "description": "Details for the `REDIRECT_WRITES` step.",
      "id": "GoogleDatastoreAdminV1RedirectWritesStepDetails",
      "type": "object",
      "properties": {
        "concurrencyMode": {
          "type": "string",
          "enum": [
            "CONCURRENCY_MODE_UNSPECIFIED",
            "PESSIMISTIC",
            "OPTIMISTIC",
            "OPTIMISTIC_WITH_ENTITY_GROUPS"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Pessimistic concurrency.",
            "Optimistic concurrency.",
            "Optimistic concurrency with entity groups."
          ],
          "description": "Ths concurrency mode for this database."
        }
      }
    },
    "Value": {
      "description": "A message that can hold any of the supported value types and associated metadata.",
      "id": "Value",
      "type": "object",
      "properties": {
        "integerValue": {
          "type": "string",
          "format": "int64",
          "description": "An integer value."
        },
        "arrayValue": {
          "$ref": "ArrayValue",
          "description": "An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`."
        },
        "geoPointValue": {
          "description": "A geo point value representing a point on the surface of Earth.",
          "$ref": "LatLng"
        },
        "doubleValue": {
          "description": "A double value.",
          "type": "number",
          "format": "double"
        },
        "entityValue": {
          "description": "An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key.",
          "$ref": "Entity"
        },
        "timestampValue": {
          "description": "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.",
          "format": "google-datetime",
          "type": "string"
        },
        "stringValue": {
          "description": "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.",
          "type": "string"
        },
        "booleanValue": {
          "type": "boolean",
          "description": "A boolean value."
        },
        "keyValue": {
          "$ref": "Key",
          "description": "A key value."
        },
        "blobValue": {
          "format": "byte",
          "description": "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.",
          "type": "string"
        },
        "excludeFromIndexes": {
          "type": "boolean",
          "description": "If the value should be excluded from all indexes including those defined explicitly."
        },
        "nullValue": {
          "description": "A null value.",
          "type": "string",
          "enum": [
            "NULL_VALUE"
          ],
          "enumDescriptions": [
            "Null value."
          ]
        },
        "meaning": {
          "format": "int32",
          "type": "integer",
          "description": "The `meaning` field should only be populated for backwards compatibility."
        }
      }
    },
    "BeginTransactionResponse": {
      "properties": {
        "transaction": {
          "description": "The transaction identifier (always present).",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "BeginTransactionResponse",
      "description": "The response for Datastore.BeginTransaction.",
      "type": "object"
    },
    "GqlQueryParameter": {
      "description": "A binding parameter for a GQL query.",
      "type": "object",
      "properties": {
        "value": {
          "description": "A value parameter.",
          "$ref": "Value"
        },
        "cursor": {
          "type": "string",
          "description": "A query cursor. Query cursors are returned in query result batches.",
          "format": "byte"
        }
      },
      "id": "GqlQueryParameter"
    },
    "PathElement": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes."
        },
        "id": {
          "format": "int64",
          "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future.",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.",
          "type": "string"
        }
      },
      "id": "PathElement",
      "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
    },
    "ReserveIdsRequest": {
      "description": "The request for Datastore.ReserveIds.",
      "id": "ReserveIdsRequest",
      "properties": {
        "databaseId": {
          "type": "string",
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database."
        },
        "keys": {
          "type": "array",
          "description": "Required. A list of keys with complete key paths whose numeric IDs should not be auto-allocated.",
          "items": {
            "$ref": "Key"
          }
        }
      },
      "type": "object"
    },
    "AggregationResultBatch": {
      "type": "object",
      "id": "AggregationResultBatch",
      "properties": {
        "aggregationResults": {
          "items": {
            "$ref": "AggregationResult"
          },
          "type": "array",
          "description": "The aggregation results for this batch."
        },
        "moreResults": {
          "enum": [
            "MORE_RESULTS_TYPE_UNSPECIFIED",
            "NOT_FINISHED",
            "MORE_RESULTS_AFTER_LIMIT",
            "MORE_RESULTS_AFTER_CURSOR",
            "NO_MORE_RESULTS"
          ],
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "There may be additional batches to fetch from this query.",
            "The query is finished, but there may be more results after the limit.",
            "The query is finished, but there may be more results after the end cursor.",
            "The query is finished, and there are no more results."
          ],
          "type": "string",
          "description": "The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`."
        },
        "readTime": {
          "description": "Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "A batch of aggregation results produced by an aggregation query."
    },
    "CommitRequest": {
      "properties": {
        "mode": {
          "description": "The type of commit to perform. Defaults to `TRANSACTIONAL`.",
          "enum": [
            "MODE_UNSPECIFIED",
            "TRANSACTIONAL",
            "NON_TRANSACTIONAL"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Transactional: The mutations are either all applied, or none are applied. Learn about transactions [here](https://cloud.google.com/datastore/docs/concepts/transactions).",
            "Non-transactional: The mutations may not apply as all or none."
          ],
          "type": "string"
        },
        "mutations": {
          "items": {
            "$ref": "Mutation"
          },
          "type": "array",
          "description": "The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity."
        },
        "transaction": {
          "description": "The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "CommitRequest",
      "description": "The request for Datastore.Commit.",
      "type": "object"
    },
    "RollbackRequest": {
      "id": "RollbackRequest",
      "description": "The request for Datastore.Rollback.",
      "type": "object",
      "properties": {
        "transaction": {
          "format": "byte",
          "description": "Required. The transaction identifier, returned by a call to Datastore.BeginTransaction.",
          "type": "string"
        }
      }
    },
    "GoogleDatastoreAdminV1Progress": {
      "id": "GoogleDatastoreAdminV1Progress",
      "properties": {
        "workCompleted": {
          "description": "The amount of work that has been completed. Note that this may be greater than work_estimated.",
          "format": "int64",
          "type": "string"
        },
        "workEstimated": {
          "description": "An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "description": "Measures the progress of a particular metric."
    },
    "EntityResult": {
      "id": "EntityResult",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message.",
          "format": "byte",
          "type": "string"
        },
        "entity": {
          "description": "The resulting entity.",
          "$ref": "Entity"
        },
        "version": {
          "format": "int64",
          "description": "The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads.",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the entity was last changed. This field is set for `FULL` entity results. If this entity is missing, this field will not be set."
        }
      },
      "description": "The result of fetching an entity from Datastore."
    },
    "PropertyOrder": {
      "properties": {
        "direction": {
          "description": "The direction to order by. Defaults to `ASCENDING`.",
          "type": "string",
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Ascending.",
            "Descending."
          ]
        },
        "property": {
          "description": "The property to order by.",
          "$ref": "PropertyReference"
        }
      },
      "description": "The desired order for a specific property.",
      "id": "PropertyOrder",
      "type": "object"
    },
    "GoogleDatastoreAdminV1MigrationProgressEvent": {
      "type": "object",
      "id": "GoogleDatastoreAdminV1MigrationProgressEvent",
      "description": "An event signifying the start of a new step in a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).",
      "properties": {
        "step": {
          "description": "The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state.",
          "enumDescriptions": [
            "Unspecified.",
            "Pre-migration: the database is prepared for migration.",
            "Start of migration.",
            "Writes are applied synchronously to at least one replica.",
            "Data is copied to Cloud Firestore and then verified to match the data in Cloud Datastore.",
            "Eventually-consistent reads are redirected to Cloud Firestore.",
            "Strongly-consistent reads are redirected to Cloud Firestore.",
            "Writes are redirected to Cloud Firestore."
          ],
          "type": "string",
          "enum": [
            "MIGRATION_STEP_UNSPECIFIED",
            "PREPARE",
            "START",
            "APPLY_WRITES_SYNCHRONOUSLY",
            "COPY_AND_VERIFY",
            "REDIRECT_EVENTUALLY_CONSISTENT_READS",
            "REDIRECT_STRONGLY_CONSISTENT_READS",
            "REDIRECT_WRITES"
          ]
        },
        "prepareStepDetails": {
          "description": "Details for the `PREPARE` step.",
          "$ref": "GoogleDatastoreAdminV1PrepareStepDetails"
        },
        "redirectWritesStepDetails": {
          "description": "Details for the `REDIRECT_WRITES` step.",
          "$ref": "GoogleDatastoreAdminV1RedirectWritesStepDetails"
        }
      }
    },
    "RollbackResponse": {
      "description": "The response for Datastore.Rollback. (an empty message).",
      "properties": {},
      "type": "object",
      "id": "RollbackResponse"
    },
    "LatLng": {
      "type": "object",
      "id": "LatLng",
      "properties": {
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number",
          "format": "double"
        },
        "latitude": {
          "format": "double",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "type": "number"
        }
      },
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges."
    },
    "BeginTransactionRequest": {
      "id": "BeginTransactionRequest",
      "type": "object",
      "description": "The request for Datastore.BeginTransaction.",
      "properties": {
        "transactionOptions": {
          "$ref": "TransactionOptions",
          "description": "Options for a new transaction."
        }
      }
    },
    "RunAggregationQueryRequest": {
      "type": "object",
      "properties": {
        "readOptions": {
          "$ref": "ReadOptions",
          "description": "The options for this query."
        },
        "partitionId": {
          "description": "Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID.",
          "$ref": "PartitionId"
        },
        "aggregationQuery": {
          "$ref": "AggregationQuery",
          "description": "The query to run."
        },
        "gqlQuery": {
          "$ref": "GqlQuery",
          "description": "The GQL query to run. This query must be an aggregation query."
        }
      },
      "description": "The request for Datastore.RunAggregationQuery.",
      "id": "RunAggregationQueryRequest"
    },
    "TransactionOptions": {
      "description": "Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.",
      "id": "TransactionOptions",
      "properties": {
        "readWrite": {
          "description": "The transaction should allow both reads and writes.",
          "$ref": "ReadWrite"
        },
        "readOnly": {
          "$ref": "ReadOnly",
          "description": "The transaction should only allow reads."
        }
      },
      "type": "object"
    },
    "KindExpression": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the kind."
        }
      },
      "description": "A representation of a kind.",
      "id": "KindExpression",
      "type": "object"
    },
    "GoogleDatastoreAdminV1ExportEntitiesMetadata": {
      "properties": {
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of entities processed."
        },
        "outputUrlPrefix": {
          "type": "string",
          "description": "Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url."
        },
        "entityFilter": {
          "description": "Description of which entities are being exported.",
          "$ref": "GoogleDatastoreAdminV1EntityFilter"
        },
        "common": {
          "description": "Metadata common to all Datastore Admin operations.",
          "$ref": "GoogleDatastoreAdminV1CommonMetadata"
        },
        "progressBytes": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of bytes processed."
        }
      },
      "type": "object",
      "description": "Metadata for ExportEntities operations.",
      "id": "GoogleDatastoreAdminV1ExportEntitiesMetadata"
    },
    "ArrayValue": {
      "properties": {
        "values": {
          "items": {
            "$ref": "Value"
          },
          "type": "array",
          "description": "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'."
        }
      },
      "id": "ArrayValue",
      "type": "object",
      "description": "An array value."
    },
    "GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata": {
      "id": "GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata",
      "type": "object",
      "properties": {
        "migrationStep": {
          "enumDescriptions": [
            "Unspecified.",
            "Pre-migration: the database is prepared for migration.",
            "Start of migration.",
            "Writes are applied synchronously to at least one replica.",
            "Data is copied to Cloud Firestore and then verified to match the data in Cloud Datastore.",
            "Eventually-consistent reads are redirected to Cloud Firestore.",
            "Strongly-consistent reads are redirected to Cloud Firestore.",
            "Writes are redirected to Cloud Firestore."
          ],
          "enum": [
            "MIGRATION_STEP_UNSPECIFIED",
            "PREPARE",
            "START",
            "APPLY_WRITES_SYNCHRONOUSLY",
            "COPY_AND_VERIFY",
            "REDIRECT_EVENTUALLY_CONSISTENT_READS",
            "REDIRECT_STRONGLY_CONSISTENT_READS",
            "REDIRECT_WRITES"
          ],
          "type": "string",
          "description": "The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode."
        },
        "migrationState": {
          "description": "The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.",
          "enumDescriptions": [
            "Unspecified.",
            "The migration is running.",
            "The migration is paused.",
            "The migration is complete."
          ],
          "enum": [
            "MIGRATION_STATE_UNSPECIFIED",
            "RUNNING",
            "PAUSED",
            "COMPLETE"
          ],
          "type": "string"
        }
      },
      "description": "Metadata for Datastore to Firestore migration operations. The DatastoreFirestoreMigration operation is not started by the end-user via an explicit \"creation\" method. This is an intentional deviation from the LRO design pattern. This singleton resource can be accessed at: \"projects/{project_id}/operations/datastore-firestore-migration\""
    },
    "PartitionId": {
      "id": "PartitionId",
      "type": "object",
      "properties": {
        "namespaceId": {
          "description": "If not empty, the ID of the namespace to which the entities belong.",
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "description": "The ID of the project to which the entities belong."
        }
      },
      "description": "A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `\"\"`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state."
    },
    "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata": {
      "description": "Metadata for ExportEntities operations.",
      "id": "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata",
      "properties": {
        "progressBytes": {
          "description": "An estimate of the number of bytes processed.",
          "$ref": "GoogleDatastoreAdminV1beta1Progress"
        },
        "outputUrlPrefix": {
          "description": "Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.",
          "type": "string"
        },
        "common": {
          "$ref": "GoogleDatastoreAdminV1beta1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "entityFilter": {
          "description": "Description of which entities are being exported.",
          "$ref": "GoogleDatastoreAdminV1beta1EntityFilter"
        },
        "progressEntities": {
          "description": "An estimate of the number of entities processed.",
          "$ref": "GoogleDatastoreAdminV1beta1Progress"
        }
      },
      "type": "object"
    },
    "Count": {
      "type": "object",
      "description": "Count of entities that match the query. The `COUNT(*)` aggregation function operates on the entire entity so it does not require a field reference.",
      "properties": {
        "upTo": {
          "type": "string",
          "description": "Optional. Optional constraint on the maximum number of entities to count. This provides a way to set an upper bound on the number of entities to scan, limiting latency and cost. Unspecified is interpreted as no bound. If a zero value is provided, a count result of zero should always be expected. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be non-negative when present.",
          "format": "int64"
        }
      },
      "id": "Count"
    },
    "Query": {
      "type": "object",
      "properties": {
        "projection": {
          "type": "array",
          "description": "The projection to return. Defaults to returning all properties.",
          "items": {
            "$ref": "Projection"
          }
        },
        "startCursor": {
          "format": "byte",
          "description": "A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).",
          "type": "string"
        },
        "order": {
          "description": "The order to apply to the query results (if empty, order is unspecified).",
          "items": {
            "$ref": "PropertyOrder"
          },
          "type": "array"
        },
        "endCursor": {
          "format": "byte",
          "type": "string",
          "description": "An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets)."
        },
        "limit": {
          "format": "int32",
          "type": "integer",
          "description": "The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be \u003e= 0 if specified."
        },
        "filter": {
          "description": "The filter to apply.",
          "$ref": "Filter"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be \u003e= 0 if specified."
        },
        "distinctOn": {
          "items": {
            "$ref": "PropertyReference"
          },
          "type": "array",
          "description": "The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned)."
        },
        "kind": {
          "description": "The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.",
          "type": "array",
          "items": {
            "$ref": "KindExpression"
          }
        }
      },
      "id": "Query",
      "description": "A query for entities."
    },
    "Mutation": {
      "properties": {
        "insert": {
          "$ref": "Entity",
          "description": "The entity to insert. The entity must not already exist. The entity key's final path element may be incomplete."
        },
        "baseVersion": {
          "type": "string",
          "description": "The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.",
          "format": "int64"
        },
        "upsert": {
          "$ref": "Entity",
          "description": "The entity to upsert. The entity may or may not already exist. The entity key's final path element may be incomplete."
        },
        "update": {
          "description": "The entity to update. The entity must already exist. Must have a complete key path.",
          "$ref": "Entity"
        },
        "updateTime": {
          "type": "string",
          "description": "The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.",
          "format": "google-datetime"
        },
        "delete": {
          "description": "The key of the entity to delete. The entity may or may not already exist. Must have a complete key path and must not be reserved/read-only.",
          "$ref": "Key"
        }
      },
      "description": "A mutation to apply to an entity.",
      "type": "object",
      "id": "Mutation"
    },
    "AllocateIdsRequest": {
      "properties": {
        "keys": {
          "items": {
            "$ref": "Key"
          },
          "type": "array",
          "description": "Required. A list of keys with incomplete key paths for which to allocate IDs. No key may be reserved/read-only."
        }
      },
      "id": "AllocateIdsRequest",
      "type": "object",
      "description": "The request for Datastore.AllocateIds."
    },
    "AggregationResult": {
      "id": "AggregationResult",
      "properties": {
        "aggregateProperties": {
          "description": "The result of the aggregation functions, ex: `COUNT(*) AS total_entities`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.",
          "additionalProperties": {
            "$ref": "Value"
          },
          "type": "object"
        }
      },
      "type": "object",
      "description": "The result of a single bucket from a Datastore aggregation query. The keys of `aggregate_properties` are the same for all results in an aggregation query, unlike entity queries which can have different fields present for each result."
    },
    "ReadOnly": {
      "description": "Options specific to read-only transactions.",
      "type": "object",
      "properties": {
        "readTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Reads entities at the given time. This may not be older than 60 seconds."
        }
      },
      "id": "ReadOnly"
    },
    "CompositeFilter": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "AND"
          ],
          "description": "The operator for combining multiple filters.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The results are required to satisfy each of the combined filters."
          ]
        },
        "filters": {
          "items": {
            "$ref": "Filter"
          },
          "description": "The list of filters to combine. Requires: * At least one filter is present.",
          "type": "array"
        }
      },
      "id": "CompositeFilter",
      "description": "A filter that merges multiple other filters using the given operator."
    },
    "AggregationQuery": {
      "description": "Datastore query for running an aggregation over a Query.",
      "properties": {
        "nestedQuery": {
          "$ref": "Query",
          "description": "Nested query for aggregation"
        },
        "aggregations": {
          "items": {
            "$ref": "Aggregation"
          },
          "description": "Optional. Series of aggregations to apply over the results of the `nested_query`. Requires: * A minimum of one and maximum of five aggregations per query.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "AggregationQuery"
    },
    "GoogleDatastoreAdminV1beta1EntityFilter": {
      "description": "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']",
      "id": "GoogleDatastoreAdminV1beta1EntityFilter",
      "properties": {
        "namespaceIds": {
          "description": "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kinds": {
          "description": "If empty, then this represents all kinds.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Aggregation": {
      "type": "object",
      "description": "Defines a aggregation that produces a single result.",
      "properties": {
        "count": {
          "description": "Count aggregator.",
          "$ref": "Count"
        },
        "alias": {
          "type": "string",
          "description": "Optional. Optional name of the property to store the result of the aggregation. If not provided, Datastore will pick a default name following the format `property_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT_UP_TO(4) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS property_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT_UP_TO(4) AS property_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to entity property name limitations."
        }
      },
      "id": "Aggregation"
    },
    "RunAggregationQueryResponse": {
      "type": "object",
      "id": "RunAggregationQueryResponse",
      "properties": {
        "batch": {
          "$ref": "AggregationResultBatch",
          "description": "A batch of aggregation results. Always present."
        },
        "query": {
          "description": "The parsed form of the `GqlQuery` from the request, if it was set.",
          "$ref": "AggregationQuery"
        }
      },
      "description": "The response for Datastore.RunAggregationQuery."
    },
    "GoogleDatastoreAdminV1beta1Progress": {
      "type": "object",
      "properties": {
        "workEstimated": {
          "format": "int64",
          "type": "string",
          "description": "An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable."
        },
        "workCompleted": {
          "format": "int64",
          "description": "The amount of work that has been completed. Note that this may be greater than work_estimated.",
          "type": "string"
        }
      },
      "id": "GoogleDatastoreAdminV1beta1Progress",
      "description": "Measures the progress of a particular metric."
    },
    "Entity": {
      "description": "A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.",
      "properties": {
        "key": {
          "$ref": "Key",
          "description": "The entity's key. An entity must have a key, unless otherwise documented (for example, an entity in `Value.entity_value` may have no key). An entity's kind is its key path's last element's kind, or null if it has no key."
        },
        "properties": {
          "type": "object",
          "description": "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `\"\"`.",
          "additionalProperties": {
            "$ref": "Value"
          }
        }
      },
      "type": "object",
      "id": "Entity"
    },
    "QueryResultBatch": {
      "properties": {
        "snapshotVersion": {
          "description": "The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.",
          "type": "string",
          "format": "int64"
        },
        "entityResultType": {
          "description": "The result type for every entity in `entity_results`.",
          "enum": [
            "RESULT_TYPE_UNSPECIFIED",
            "FULL",
            "PROJECTION",
            "KEY_ONLY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "The key and properties.",
            "A projected subset of properties. The entity may have no key.",
            "Only the key."
          ]
        },
        "readTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore."
        },
        "endCursor": {
          "description": "A cursor that points to the position after the last result in the batch.",
          "type": "string",
          "format": "byte"
        },
        "entityResults": {
          "items": {
            "$ref": "EntityResult"
          },
          "description": "The results for this batch.",
          "type": "array"
        },
        "skippedCursor": {
          "description": "A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.",
          "format": "byte",
          "type": "string"
        },
        "moreResults": {
          "enum": [
            "MORE_RESULTS_TYPE_UNSPECIFIED",
            "NOT_FINISHED",
            "MORE_RESULTS_AFTER_LIMIT",
            "MORE_RESULTS_AFTER_CURSOR",
            "NO_MORE_RESULTS"
          ],
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "There may be additional batches to fetch from this query.",
            "The query is finished, but there may be more results after the limit.",
            "The query is finished, but there may be more results after the end cursor.",
            "The query is finished, and there are no more results."
          ],
          "type": "string",
          "description": "The state of the query after the current batch."
        },
        "skippedResults": {
          "format": "int32",
          "type": "integer",
          "description": "The number of results skipped, typically because of an offset."
        }
      },
      "type": "object",
      "description": "A batch of results produced by a query.",
      "id": "QueryResultBatch"
    },
    "Filter": {
      "type": "object",
      "properties": {
        "propertyFilter": {
          "description": "A filter on a property.",
          "$ref": "PropertyFilter"
        },
        "compositeFilter": {
          "$ref": "CompositeFilter",
          "description": "A composite filter."
        }
      },
      "description": "A holder for any type of filter.",
      "id": "Filter"
    },
    "RunQueryResponse": {
      "description": "The response for Datastore.RunQuery.",
      "type": "object",
      "properties": {
        "query": {
          "$ref": "Query",
          "description": "The parsed form of the `GqlQuery` from the request, if it was set."
        },
        "batch": {
          "$ref": "QueryResultBatch",
          "description": "A batch of query results (always present)."
        }
      },
      "id": "RunQueryResponse"
    },
    "LookupRequest": {
      "type": "object",
      "id": "LookupRequest",
      "description": "The request for Datastore.Lookup.",
      "properties": {
        "keys": {
          "description": "Required. Keys of entities to look up.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        },
        "readOptions": {
          "$ref": "ReadOptions",
          "description": "The options for this lookup request."
        }
      }
    },
    "AllocateIdsResponse": {
      "properties": {
        "keys": {
          "description": "The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        }
      },
      "id": "AllocateIdsResponse",
      "description": "The response for Datastore.AllocateIds.",
      "type": "object"
    },
    "PropertyFilter": {
      "properties": {
        "value": {
          "description": "The value to compare the property to.",
          "$ref": "Value"
        },
        "op": {
          "type": "string",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "EQUAL",
            "IN",
            "NOT_EQUAL",
            "HAS_ANCESTOR",
            "NOT_IN"
          ],
          "description": "The operator to filter by.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The given `property` is less than the given `value`. Requires: * That `property` comes first in `order_by`.",
            "The given `property` is less than or equal to the given `value`. Requires: * That `property` comes first in `order_by`.",
            "The given `property` is greater than the given `value`. Requires: * That `property` comes first in `order_by`.",
            "The given `property` is greater than or equal to the given `value`. Requires: * That `property` comes first in `order_by`.",
            "The given `property` is equal to the given `value`.",
            "The given `property` is equal to at least one value in the given array. Requires: * That `value` is a non-empty `ArrayValue` with at most 10 values. * No other `IN` or `NOT_IN` is in the same query.",
            "The given `property` is not equal to the given `value`. Requires: * No other `NOT_EQUAL` or `NOT_IN` is in the same query. * That `property` comes first in the `order_by`.",
            "Limit the result set to the given entity and its descendants. Requires: * That `value` is an entity key.",
            "The value of the `property` is not in the given array. Requires: * That `value` is a non-empty `ArrayValue` with at most 10 values. * No other `IN`, `NOT_IN`, `NOT_EQUAL` is in the same query. * That `field` comes first in the `order_by`."
          ]
        },
        "property": {
          "description": "The property to filter by.",
          "$ref": "PropertyReference"
        }
      },
      "description": "A filter on a specific property.",
      "id": "PropertyFilter",
      "type": "object"
    },
    "GoogleDatastoreAdminV1EntityFilter": {
      "properties": {
        "namespaceIds": {
          "type": "array",
          "description": "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.",
          "items": {
            "type": "string"
          }
        },
        "kinds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "If empty, then this represents all kinds."
        }
      },
      "id": "GoogleDatastoreAdminV1EntityFilter",
      "type": "object",
      "description": "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']"
    },
    "GoogleDatastoreAdminV1PrepareStepDetails": {
      "properties": {
        "concurrencyMode": {
          "enumDescriptions": [
            "Unspecified.",
            "Pessimistic concurrency.",
            "Optimistic concurrency.",
            "Optimistic concurrency with entity groups."
          ],
          "enum": [
            "CONCURRENCY_MODE_UNSPECIFIED",
            "PESSIMISTIC",
            "OPTIMISTIC",
            "OPTIMISTIC_WITH_ENTITY_GROUPS"
          ],
          "description": "The concurrency mode this database will use when it reaches the `REDIRECT_WRITES` step.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleDatastoreAdminV1PrepareStepDetails",
      "description": "Details for the `PREPARE` step."
    },
    "GqlQuery": {
      "type": "object",
      "description": "A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).",
      "id": "GqlQuery",
      "properties": {
        "allowLiterals": {
          "type": "boolean",
          "description": "When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is."
        },
        "positionalBindings": {
          "description": "Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.",
          "items": {
            "$ref": "GqlQueryParameter"
          },
          "type": "array"
        },
        "namedBindings": {
          "type": "object",
          "description": "For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `\"\"`.",
          "additionalProperties": {
            "$ref": "GqlQueryParameter"
          }
        },
        "queryString": {
          "description": "A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).",
          "type": "string"
        }
      }
    },
    "GoogleDatastoreAdminV1ExportEntitiesResponse": {
      "properties": {
        "outputUrl": {
          "description": "Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.",
          "type": "string"
        }
      },
      "id": "GoogleDatastoreAdminV1ExportEntitiesResponse",
      "description": "The response for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.",
      "type": "object"
    },
    "GoogleDatastoreAdminV1ImportEntitiesMetadata": {
      "description": "Metadata for ImportEntities operations.",
      "type": "object",
      "properties": {
        "progressBytes": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of bytes processed."
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of entities processed."
        },
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1EntityFilter",
          "description": "Description of which entities are being imported."
        },
        "common": {
          "description": "Metadata common to all Datastore Admin operations.",
          "$ref": "GoogleDatastoreAdminV1CommonMetadata"
        },
        "inputUrl": {
          "description": "The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.",
          "type": "string"
        }
      },
      "id": "GoogleDatastoreAdminV1ImportEntitiesMetadata"
    },
    "GoogleDatastoreAdminV1MigrationStateEvent": {
      "type": "object",
      "properties": {
        "state": {
          "description": "The new state of the migration.",
          "enumDescriptions": [
            "Unspecified.",
            "The migration is running.",
            "The migration is paused.",
            "The migration is complete."
          ],
          "enum": [
            "MIGRATION_STATE_UNSPECIFIED",
            "RUNNING",
            "PAUSED",
            "COMPLETE"
          ],
          "type": "string"
        }
      },
      "description": "An event signifying a change in state of a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).",
      "id": "GoogleDatastoreAdminV1MigrationStateEvent"
    },
    "MutationResult": {
      "id": "MutationResult",
      "description": "The result of applying a mutation.",
      "type": "object",
      "properties": {
        "key": {
          "$ref": "Key",
          "description": "The automatically allocated key. Set only when the mutation allocated a key."
        },
        "version": {
          "description": "The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity.",
          "type": "string",
          "format": "int64"
        },
        "conflictDetected": {
          "description": "Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.",
          "type": "boolean"
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The update time of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a 'delete'."
        }
      }
    },
    "Key": {
      "id": "Key",
      "properties": {
        "path": {
          "items": {
            "$ref": "PathElement"
          },
          "type": "array",
          "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
        },
        "partitionId": {
          "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition.",
          "$ref": "PartitionId"
        }
      },
      "type": "object",
      "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
    },
    "RunQueryRequest": {
      "type": "object",
      "description": "The request for Datastore.RunQuery.",
      "properties": {
        "partitionId": {
          "$ref": "PartitionId",
          "description": "Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID."
        },
        "readOptions": {
          "description": "The options for this query.",
          "$ref": "ReadOptions"
        },
        "gqlQuery": {
          "$ref": "GqlQuery",
          "description": "The GQL query to run. This query must be a non-aggregation query."
        },
        "query": {
          "description": "The query to run.",
          "$ref": "Query"
        }
      },
      "id": "RunQueryRequest"
    },
    "CommitResponse": {
      "id": "CommitResponse",
      "properties": {
        "indexUpdates": {
          "type": "integer",
          "format": "int32",
          "description": "The number of index entries updated during the commit, or zero if none were updated."
        },
        "mutationResults": {
          "type": "array",
          "description": "The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request.",
          "items": {
            "$ref": "MutationResult"
          }
        },
        "commitTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The transaction commit timestamp. Not set for non-transactional commits."
        }
      },
      "type": "object",
      "description": "The response for Datastore.Commit."
    },
    "Projection": {
      "type": "object",
      "properties": {
        "property": {
          "$ref": "PropertyReference",
          "description": "The property to project."
        }
      },
      "description": "A representation of a property in a projection.",
      "id": "Projection"
    },
    "GoogleDatastoreAdminV1beta1ExportEntitiesResponse": {
      "description": "The response for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.",
      "id": "GoogleDatastoreAdminV1beta1ExportEntitiesResponse",
      "properties": {
        "outputUrl": {
          "description": "Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReadOptions": {
      "description": "The options shared by read requests.",
      "id": "ReadOptions",
      "properties": {
        "readConsistency": {
          "type": "string",
          "enum": [
            "READ_CONSISTENCY_UNSPECIFIED",
            "STRONG",
            "EVENTUAL"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Strong consistency.",
            "Eventual consistency."
          ],
          "description": "The non-transactional read consistency to use."
        },
        "readTime": {
          "description": "Reads entities as they were at the given time. This may not be older than 270 seconds. This value is only supported for Cloud Firestore in Datastore mode.",
          "format": "google-datetime",
          "type": "string"
        },
        "transaction": {
          "format": "byte",
          "description": "The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReadWrite": {
      "id": "ReadWrite",
      "description": "Options specific to read / write transactions.",
      "properties": {
        "previousTransaction": {
          "description": "The transaction identifier of the transaction being retried.",
          "type": "string",
          "format": "byte"
        }
      },
      "type": "object"
    }
  },
  "parameters": {
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "alt": {
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    }
  },
  "baseUrl": "https://datastore.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "title": "Cloud Datastore API",
  "batchPath": "batch",
  "revision": "20221018",
  "id": "datastore:v1beta3",
  "documentationLink": "https://cloud.google.com/datastore/",
  "version_module": true,
  "protocol": "rest",
  "resources": {
    "projects": {
      "methods": {
        "reserveIds": {
          "flatPath": "v1beta3/projects/{projectId}:reserveIds",
          "response": {
            "$ref": "ReserveIdsResponse"
          },
          "httpMethod": "POST",
          "parameters": {
            "projectId": {
              "description": "Required. The ID of the project against which to make the request.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "path": "v1beta3/projects/{projectId}:reserveIds",
          "id": "datastore.projects.reserveIds",
          "description": "Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.",
          "request": {
            "$ref": "ReserveIdsRequest"
          }
        },
        "runQuery": {
          "id": "datastore.projects.runQuery",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "flatPath": "v1beta3/projects/{projectId}:runQuery",
          "request": {
            "$ref": "RunQueryRequest"
          },
          "httpMethod": "POST",
          "description": "Queries for entities.",
          "response": {
            "$ref": "RunQueryResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "Required. The ID of the project against which to make the request.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "path": "v1beta3/projects/{projectId}:runQuery"
        },
        "beginTransaction": {
          "response": {
            "$ref": "BeginTransactionResponse"
          },
          "description": "Begins a new transaction.",
          "id": "datastore.projects.beginTransaction",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "httpMethod": "POST",
          "flatPath": "v1beta3/projects/{projectId}:beginTransaction",
          "request": {
            "$ref": "BeginTransactionRequest"
          },
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "Required. The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1beta3/projects/{projectId}:beginTransaction"
        },
        "allocateIds": {
          "parameterOrder": [
            "projectId"
          ],
          "description": "Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.",
          "httpMethod": "POST",
          "id": "datastore.projects.allocateIds",
          "flatPath": "v1beta3/projects/{projectId}:allocateIds",
          "request": {
            "$ref": "AllocateIdsRequest"
          },
          "path": "v1beta3/projects/{projectId}:allocateIds",
          "response": {
            "$ref": "AllocateIdsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "parameters": {
            "projectId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Required. The ID of the project against which to make the request."
            }
          }
        },
        "runAggregationQuery": {
          "request": {
            "$ref": "RunAggregationQueryRequest"
          },
          "httpMethod": "POST",
          "flatPath": "v1beta3/projects/{projectId}:runAggregationQuery",
          "response": {
            "$ref": "RunAggregationQueryResponse"
          },
          "path": "v1beta3/projects/{projectId}:runAggregationQuery",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "parameterOrder": [
            "projectId"
          ],
          "description": "Runs an aggregation query.",
          "parameters": {
            "projectId": {
              "description": "Required. The ID of the project against which to make the request.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "datastore.projects.runAggregationQuery"
        },
        "rollback": {
          "request": {
            "$ref": "RollbackRequest"
          },
          "httpMethod": "POST",
          "description": "Rolls back a transaction.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "type": "string",
              "location": "path",
              "description": "Required. The ID of the project against which to make the request.",
              "required": true
            }
          },
          "id": "datastore.projects.rollback",
          "response": {
            "$ref": "RollbackResponse"
          },
          "path": "v1beta3/projects/{projectId}:rollback",
          "flatPath": "v1beta3/projects/{projectId}:rollback"
        },
        "lookup": {
          "parameters": {
            "projectId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Required. The ID of the project against which to make the request."
            }
          },
          "httpMethod": "POST",
          "flatPath": "v1beta3/projects/{projectId}:lookup",
          "request": {
            "$ref": "LookupRequest"
          },
          "id": "datastore.projects.lookup",
          "path": "v1beta3/projects/{projectId}:lookup",
          "response": {
            "$ref": "LookupResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "description": "Looks up entities by key.",
          "parameterOrder": [
            "projectId"
          ]
        },
        "commit": {
          "parameters": {
            "projectId": {
              "type": "string",
              "required": true,
              "description": "Required. The ID of the project against which to make the request.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "id": "datastore.projects.commit",
          "httpMethod": "POST",
          "description": "Commits a transaction, optionally creating, deleting or modifying some entities.",
          "parameterOrder": [
            "projectId"
          ],
          "flatPath": "v1beta3/projects/{projectId}:commit",
          "response": {
            "$ref": "CommitResponse"
          },
          "path": "v1beta3/projects/{projectId}:commit",
          "request": {
            "$ref": "CommitRequest"
          }
        }
      }
    }
  },
  "basePath": "",
  "kind": "discovery#restDescription",
  "description": "Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. ",
  "version": "v1beta3",
  "servicePath": "",
  "rootUrl": "https://datastore.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://datastore.mtls.googleapis.com/",
  "name": "datastore",
  "ownerName": "Google"
}
