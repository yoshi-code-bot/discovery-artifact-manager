{
  "description": "Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.",
  "mtlsRootUrl": "https://artifactregistry.mtls.googleapis.com/",
  "parameters": {
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "alt": {
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "location": "query"
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "get": {
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Resource name for the location.",
                  "pattern": "^projects/[^/]+/locations/[^/]+$"
                }
              },
              "path": "v1/{+name}",
              "response": {
                "$ref": "Location"
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "id": "artifactregistry.projects.locations.get",
              "description": "Gets information about a location.",
              "httpMethod": "GET"
            },
            "list": {
              "id": "artifactregistry.projects.locations.list",
              "httpMethod": "GET",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "parameterOrder": [
                "name"
              ],
              "description": "Lists information about the supported locations for this service.",
              "flatPath": "v1/projects/{projectsId}/locations",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                },
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "format": "int32",
                  "description": "The maximum number of results to return. If not set, the service selects a default."
                },
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The resource that owns the locations collection, if applicable."
                }
              },
              "path": "v1/{+name}/locations"
            }
          },
          "resources": {
            "repositories": {
              "resources": {
                "kfpArtifacts": {
                  "methods": {
                    "upload": {
                      "request": {
                        "$ref": "UploadKfpArtifactRequest"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "mediaUpload": {
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/kfpArtifacts:create",
                            "multipart": true
                          }
                        },
                        "accept": [
                          "*/*"
                        ]
                      },
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "description": "The resource name of the repository where the KFP artifact will be uploaded.",
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "description": "Directly uploads a KFP artifact. The returned Operation will complete once the resource is uploaded. Package, Version, and File resources will be created based on the uploaded artifact. Uploaded artifacts that conflict with existing resources will be overwritten.",
                      "path": "v1/{+parent}/kfpArtifacts:create",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/kfpArtifacts:create",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "UploadKfpArtifactMediaResponse"
                      },
                      "id": "artifactregistry.projects.locations.repositories.kfpArtifacts.upload",
                      "supportsMediaUpload": true,
                      "httpMethod": "POST"
                    }
                  }
                },
                "mavenArtifacts": {
                  "methods": {
                    "get": {
                      "description": "Gets a maven artifact.",
                      "id": "artifactregistry.projects.locations.repositories.mavenArtifacts.get",
                      "httpMethod": "GET",
                      "path": "v1/{+name}",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "description": "Required. The name of the maven artifact.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/mavenArtifacts/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts/{mavenArtifactsId}",
                      "response": {
                        "$ref": "MavenArtifact"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "list": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "pageSize": {
                          "location": "query",
                          "type": "integer",
                          "format": "int32",
                          "description": "The maximum number of artifacts to return."
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "location": "query"
                        },
                        "parent": {
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "Required. The name of the parent resource whose maven artifacts will be listed."
                        }
                      },
                      "path": "v1/{+parent}/mavenArtifacts",
                      "id": "artifactregistry.projects.locations.repositories.mavenArtifacts.list",
                      "response": {
                        "$ref": "ListMavenArtifactsResponse"
                      },
                      "description": "Lists maven artifacts."
                    }
                  }
                },
                "files": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "filter": {
                          "type": "string",
                          "location": "query",
                          "description": "An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are: * `name` * `owner` An example of using a filter: * `name=\"projects/p1/locations/us-central1/repositories/repo1/files/a/b/*\"` --\u003e Files with an ID starting with \"a/b/\". * `owner=\"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0\"` --\u003e Files owned by the version `1.0` in package `pkg1`."
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "type": "string"
                        },
                        "pageSize": {
                          "location": "query",
                          "type": "integer",
                          "description": "The maximum number of files to return.",
                          "format": "int32"
                        },
                        "orderBy": {
                          "description": "The field to order the results by.",
                          "type": "string",
                          "location": "query"
                        },
                        "parent": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true,
                          "location": "path",
                          "description": "The name of the repository whose files will be listed. For example: \"projects/p1/locations/us-central1/repositories/repo1"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "ListFilesResponse"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists files.",
                      "path": "v1/{+parent}/files",
                      "id": "artifactregistry.projects.locations.repositories.files.list"
                    },
                    "get": {
                      "path": "v1/{+name}",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files/{filesId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The name of the file to retrieve.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/.*$",
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1File"
                      },
                      "httpMethod": "GET",
                      "id": "artifactregistry.projects.locations.repositories.files.get",
                      "description": "Gets a file."
                    }
                  }
                },
                "pythonPackages": {
                  "methods": {
                    "get": {
                      "response": {
                        "$ref": "PythonPackage"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages/{pythonPackagesId}",
                      "path": "v1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameters": {
                        "name": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pythonPackages/[^/]+$",
                          "description": "Required. The name of the python package."
                        }
                      },
                      "description": "Gets a python package.",
                      "id": "artifactregistry.projects.locations.repositories.pythonPackages.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET"
                    },
                    "list": {
                      "parameters": {
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The maximum number of artifacts to return.",
                          "location": "query"
                        },
                        "parent": {
                          "required": true,
                          "type": "string",
                          "description": "Required. The name of the parent resource whose python packages will be listed.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        },
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "The next_page_token value returned from a previous list request, if any."
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.pythonPackages.list",
                      "description": "Lists python packages.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages",
                      "path": "v1/{+parent}/pythonPackages",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "ListPythonPackagesResponse"
                      },
                      "httpMethod": "GET"
                    }
                  }
                },
                "npmPackages": {
                  "methods": {
                    "list": {
                      "path": "v1/{+parent}/npmPackages",
                      "httpMethod": "GET",
                      "id": "artifactregistry.projects.locations.repositories.npmPackages.list",
                      "parameters": {
                        "pageToken": {
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "Required. The name of the parent resource whose npm packages will be listed.",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The maximum number of artifacts to return.",
                          "type": "integer",
                          "format": "int32",
                          "location": "query"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages",
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "ListNpmPackagesResponse"
                      },
                      "description": "Lists npm packages."
                    },
                    "get": {
                      "parameters": {
                        "name": {
                          "required": true,
                          "location": "path",
                          "description": "Required. The name of the npm package.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/npmPackages/[^/]+$"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "NpmPackage"
                      },
                      "path": "v1/{+name}",
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "artifactregistry.projects.locations.repositories.npmPackages.get",
                      "httpMethod": "GET",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages/{npmPackagesId}",
                      "description": "Gets a npm package."
                    }
                  }
                },
                "dockerImages": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "orderBy": {
                          "description": "The field to order the results by.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The maximum number of artifacts to return.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "parent": {
                          "description": "Required. The name of the parent resource whose docker images will be listed.",
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.dockerImages.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "description": "Lists docker images.",
                      "response": {
                        "$ref": "ListDockerImagesResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages",
                      "path": "v1/{+parent}/dockerImages"
                    },
                    "get": {
                      "httpMethod": "GET",
                      "path": "v1/{+name}",
                      "response": {
                        "$ref": "DockerImage"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages/{dockerImagesId}",
                      "description": "Gets a docker image.",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "type": "string",
                          "description": "Required. The name of the docker images.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/dockerImages/[^/]+$"
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.dockerImages.get"
                    }
                  }
                },
                "packages": {
                  "resources": {
                    "tags": {
                      "methods": {
                        "get": {
                          "parameterOrder": [
                            "name"
                          ],
                          "description": "Gets a tag.",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ],
                          "httpMethod": "GET",
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.get",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "parameters": {
                            "name": {
                              "type": "string",
                              "description": "The name of the tag to retrieve.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$"
                            }
                          },
                          "path": "v1/{+name}",
                          "response": {
                            "$ref": "Tag"
                          }
                        },
                        "create": {
                          "path": "v1/{+parent}/tags",
                          "httpMethod": "POST",
                          "parameterOrder": [
                            "parent"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags",
                          "request": {
                            "$ref": "Tag"
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.create",
                          "response": {
                            "$ref": "Tag"
                          },
                          "parameters": {
                            "tagId": {
                              "location": "query",
                              "type": "string",
                              "description": "The tag id to use for this repository."
                            },
                            "parent": {
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                              "description": "The name of the parent resource where the tag will be created.",
                              "type": "string",
                              "location": "path"
                            }
                          },
                          "description": "Creates a tag."
                        },
                        "patch": {
                          "response": {
                            "$ref": "Tag"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$",
                              "location": "path",
                              "description": "The name of the tag, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1\". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\\-._~:@], anything else must be URL encoded.",
                              "type": "string",
                              "required": true
                            },
                            "updateMask": {
                              "format": "google-fieldmask",
                              "location": "query",
                              "type": "string",
                              "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask"
                            }
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.patch",
                          "path": "v1/{+name}",
                          "httpMethod": "PATCH",
                          "description": "Updates a tag.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "request": {
                            "$ref": "Tag"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "delete": {
                          "httpMethod": "DELETE",
                          "parameters": {
                            "name": {
                              "description": "The name of the tag to delete.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "path": "v1/{+name}",
                          "response": {
                            "$ref": "Empty"
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.delete",
                          "description": "Deletes a tag."
                        },
                        "list": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags",
                          "path": "v1/{+parent}/tags",
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.list",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ],
                          "response": {
                            "$ref": "ListTagsResponse"
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "httpMethod": "GET",
                          "parameters": {
                            "pageToken": {
                              "location": "query",
                              "description": "The next_page_token value returned from a previous list request, if any.",
                              "type": "string"
                            },
                            "filter": {
                              "location": "query",
                              "description": "An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are: * `version` An example of using a filter: * `version=\"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0\"` --\u003e Tags that are applied to the version `1.0` in package `pkg1`.",
                              "type": "string"
                            },
                            "pageSize": {
                              "type": "integer",
                              "location": "query",
                              "format": "int32",
                              "description": "The maximum number of tags to return. Maximum page size is 10,000."
                            },
                            "parent": {
                              "type": "string",
                              "required": true,
                              "description": "The name of the parent resource whose tags will be listed.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                              "location": "path"
                            }
                          },
                          "description": "Lists tags."
                        }
                      }
                    },
                    "versions": {
                      "methods": {
                        "get": {
                          "parameterOrder": [
                            "name"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}",
                          "path": "v1/{+name}",
                          "httpMethod": "GET",
                          "parameters": {
                            "view": {
                              "enum": [
                                "VERSION_VIEW_UNSPECIFIED",
                                "BASIC",
                                "FULL"
                              ],
                              "type": "string",
                              "location": "query",
                              "description": "The view that should be returned in the response.",
                              "enumDescriptions": [
                                "The default / unset value. The API will default to the BASIC view.",
                                "Includes basic information about the version, but not any related tags.",
                                "Include everything."
                              ]
                            },
                            "name": {
                              "location": "path",
                              "required": true,
                              "type": "string",
                              "description": "The name of the version to retrieve.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$"
                            }
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.get",
                          "response": {
                            "$ref": "Version"
                          },
                          "description": "Gets a version",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ]
                        },
                        "list": {
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.list",
                          "description": "Lists versions.",
                          "path": "v1/{+parent}/versions",
                          "parameters": {
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                              "description": "The name of the parent resource whose versions will be listed.",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "pageToken": {
                              "location": "query",
                              "type": "string",
                              "description": "The next_page_token value returned from a previous list request, if any."
                            },
                            "orderBy": {
                              "location": "query",
                              "description": "Optional. The field to order the results by.",
                              "type": "string"
                            },
                            "pageSize": {
                              "format": "int32",
                              "location": "query",
                              "type": "integer",
                              "description": "The maximum number of versions to return. Maximum page size is 1,000."
                            },
                            "view": {
                              "enum": [
                                "VERSION_VIEW_UNSPECIFIED",
                                "BASIC",
                                "FULL"
                              ],
                              "location": "query",
                              "type": "string",
                              "enumDescriptions": [
                                "The default / unset value. The API will default to the BASIC view.",
                                "Includes basic information about the version, but not any related tags.",
                                "Include everything."
                              ],
                              "description": "The view that should be returned in the response."
                            }
                          },
                          "response": {
                            "$ref": "ListVersionsResponse"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ],
                          "httpMethod": "GET",
                          "parameterOrder": [
                            "parent"
                          ]
                        },
                        "delete": {
                          "description": "Deletes a version and all of its content. The returned operation will complete once the version has been deleted.",
                          "response": {
                            "$ref": "Operation"
                          },
                          "httpMethod": "DELETE",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}",
                          "parameterOrder": [
                            "name"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "path": "v1/{+name}",
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$",
                              "location": "path",
                              "type": "string",
                              "required": true,
                              "description": "The name of the version to delete."
                            },
                            "force": {
                              "type": "boolean",
                              "description": "By default, a version that is tagged may not be deleted. If force=true, the version and any tags pointing to the version are deleted.",
                              "location": "query"
                            }
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.delete"
                        }
                      }
                    }
                  },
                  "methods": {
                    "get": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}",
                      "description": "Gets a package.",
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "artifactregistry.projects.locations.repositories.packages.get",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                          "description": "Required. The name of the package to retrieve.",
                          "location": "path",
                          "type": "string"
                        }
                      },
                      "path": "v1/{+name}",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "Package"
                      }
                    },
                    "list": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "httpMethod": "GET",
                      "path": "v1/{+parent}/packages",
                      "id": "artifactregistry.projects.locations.repositories.packages.list",
                      "response": {
                        "$ref": "ListPackagesResponse"
                      },
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Required. The name of the parent resource whose packages will be listed.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "The maximum number of packages to return. Maximum page size is 1,000.",
                          "location": "query",
                          "format": "int32"
                        },
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "The next_page_token value returned from a previous list request, if any."
                        }
                      },
                      "description": "Lists packages."
                    },
                    "delete": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "artifactregistry.projects.locations.repositories.packages.delete",
                      "description": "Deletes a package and all of its versions and tags. The returned operation will complete once the package has been deleted.",
                      "response": {
                        "$ref": "Operation"
                      },
                      "path": "v1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the package to delete.",
                          "required": true,
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$"
                        }
                      },
                      "httpMethod": "DELETE"
                    }
                  }
                },
                "aptArtifacts": {
                  "methods": {
                    "upload": {
                      "request": {
                        "$ref": "UploadAptArtifactRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:create",
                      "id": "artifactregistry.projects.locations.repositories.aptArtifacts.upload",
                      "description": "Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/aptArtifacts:create",
                            "multipart": true
                          }
                        }
                      },
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "UploadAptArtifactMediaResponse"
                      },
                      "path": "v1/{+parent}/aptArtifacts:create",
                      "supportsMediaUpload": true
                    },
                    "import": {
                      "id": "artifactregistry.projects.locations.repositories.aptArtifacts.import",
                      "request": {
                        "$ref": "ImportAptArtifactsRequest"
                      },
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:import",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "path": "v1/{+parent}/aptArtifacts:import",
                      "description": "Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored."
                    }
                  }
                },
                "yumArtifacts": {
                  "methods": {
                    "import": {
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "artifactregistry.projects.locations.repositories.yumArtifacts.import",
                      "response": {
                        "$ref": "Operation"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "ImportYumArtifactsRequest"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:import",
                      "path": "v1/{+parent}/yumArtifacts:import",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true,
                          "description": "The name of the parent resource where the artifacts will be imported."
                        }
                      },
                      "description": "Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored."
                    },
                    "upload": {
                      "path": "v1/{+parent}/yumArtifacts:create",
                      "request": {
                        "$ref": "UploadYumArtifactRequest"
                      },
                      "supportsMediaUpload": true,
                      "mediaUpload": {
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/yumArtifacts:create",
                            "multipart": true
                          }
                        },
                        "accept": [
                          "*/*"
                        ]
                      },
                      "id": "artifactregistry.projects.locations.repositories.yumArtifacts.upload",
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
                      "response": {
                        "$ref": "UploadYumArtifactMediaResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:create",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "methods": {
                "setIamPolicy": {
                  "path": "v1/{+resource}:setIamPolicy",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "id": "artifactregistry.projects.locations.repositories.setIamPolicy",
                  "description": "Updates the IAM policy for a given resource.",
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "create": {
                  "request": {
                    "$ref": "Repository"
                  },
                  "description": "Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "artifactregistry.projects.locations.repositories.create",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "repositoryId": {
                      "location": "query",
                      "description": "The repository id to use for this repository.",
                      "type": "string"
                    },
                    "parent": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. The name of the parent resource where the repository will be created.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "POST",
                  "path": "v1/{+parent}/repositories"
                },
                "patch": {
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "The name of the repository, for example: \"projects/p1/locations/us-central1/repositories/repo1\".",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                    },
                    "updateMask": {
                      "type": "string",
                      "location": "query",
                      "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                      "format": "google-fieldmask"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "Repository"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "path": "v1/{+name}",
                  "httpMethod": "PATCH",
                  "description": "Updates a repository.",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "artifactregistry.projects.locations.repositories.patch",
                  "response": {
                    "$ref": "Repository"
                  }
                },
                "getIamPolicy": {
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "required": true,
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "location": "path"
                    },
                    "options.requestedPolicyVersion": {
                      "location": "query",
                      "format": "int32",
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                      "type": "integer"
                    }
                  },
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "id": "artifactregistry.projects.locations.repositories.getIamPolicy",
                  "path": "v1/{+resource}:getIamPolicy",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "description": "Gets the IAM policy for a given resource."
                },
                "list": {
                  "path": "v1/{+parent}/repositories",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories",
                  "parameters": {
                    "pageSize": {
                      "format": "int32",
                      "type": "integer",
                      "description": "The maximum number of repositories to return. Maximum page size is 1,000.",
                      "location": "query"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "The next_page_token value returned from a previous list request, if any."
                    },
                    "parent": {
                      "required": true,
                      "type": "string",
                      "description": "Required. The name of the parent resource whose repositories will be listed.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "id": "artifactregistry.projects.locations.repositories.list",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "description": "Lists repositories.",
                  "response": {
                    "$ref": "ListRepositoriesResponse"
                  }
                },
                "testIamPermissions": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions",
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "parameters": {
                    "resource": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "description": "Tests if the caller has a list of permissions on a resource.",
                  "parameterOrder": [
                    "resource"
                  ],
                  "path": "v1/{+resource}:testIamPermissions",
                  "id": "artifactregistry.projects.locations.repositories.testIamPermissions",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ]
                },
                "get": {
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "Required. The name of the repository to retrieve.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "description": "Gets a repository.",
                  "id": "artifactregistry.projects.locations.repositories.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Repository"
                  },
                  "path": "v1/{+name}",
                  "httpMethod": "GET"
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a repository and all of its contents. The returned Operation will finish once the repository has been deleted. It will not have any Operation metadata and will return a google.protobuf.Empty response.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "id": "artifactregistry.projects.locations.repositories.delete",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the repository to delete.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}"
                }
              }
            },
            "operations": {
              "methods": {
                "get": {
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string"
                    }
                  },
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "artifactregistry.projects.locations.operations.get",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}"
                }
              }
            }
          }
        }
      },
      "methods": {
        "updateProjectSettings": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "v1/projects/{projectsId}/projectSettings",
          "parameters": {
            "name": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set",
              "pattern": "^projects/[^/]+/projectSettings$"
            },
            "updateMask": {
              "format": "google-fieldmask",
              "description": "Field mask to support partial updates.",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Updates the Settings for the Project.",
          "request": {
            "$ref": "ProjectSettings"
          },
          "id": "artifactregistry.projects.updateProjectSettings",
          "path": "v1/{+name}",
          "response": {
            "$ref": "ProjectSettings"
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "PATCH"
        },
        "getProjectSettings": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "description": "Required. The name of the projectSettings resource.",
              "location": "path",
              "required": true,
              "pattern": "^projects/[^/]+/projectSettings$",
              "type": "string"
            }
          },
          "description": "Retrieves the Settings for the Project.",
          "id": "artifactregistry.projects.getProjectSettings",
          "path": "v1/{+name}",
          "response": {
            "$ref": "ProjectSettings"
          },
          "flatPath": "v1/projects/{projectsId}/projectSettings",
          "parameterOrder": [
            "name"
          ]
        }
      }
    }
  },
  "basePath": "",
  "version_module": true,
  "id": "artifactregistry:v1",
  "schemas": {
    "Version": {
      "id": "Version",
      "properties": {
        "description": {
          "description": "Optional. Description of the version, as specified in its metadata.",
          "type": "string"
        },
        "createTime": {
          "description": "The time when the version was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "description": "Output only. Repository-specific Metadata stored against this version. The fields returned are defined by the underlying repository-specific resource. Currently, the resources could be: DockerImage MavenArtifact",
          "type": "object",
          "readOnly": true
        },
        "name": {
          "description": "The name of the version, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1\". If the package or version ID parts contain slashes, the slashes are escaped.",
          "type": "string"
        },
        "relatedTags": {
          "description": "Output only. A list of related tags. Will contain up to 100 tags that reference this version.",
          "type": "array",
          "items": {
            "$ref": "Tag"
          }
        },
        "updateTime": {
          "description": "The time when the version was last updated.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "The body of a version resource. A version resource represents a collection of components, such as files and other data. This may correspond to a version in many package management schemes.",
      "type": "object"
    },
    "SetIamPolicyRequest": {
      "type": "object",
      "description": "Request message for `SetIamPolicy` method.",
      "id": "SetIamPolicyRequest",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "Policy"
        }
      }
    },
    "UploadKfpArtifactRequest": {
      "type": "object",
      "description": "The request to upload an artifact.",
      "id": "UploadKfpArtifactRequest",
      "properties": {
        "description": {
          "description": "Description of the package version.",
          "type": "string"
        },
        "tags": {
          "description": "Tags to be created with the version.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProjectSettings": {
      "description": "The Artifact Registry settings that apply to a Project.",
      "id": "ProjectSettings",
      "type": "object",
      "properties": {
        "legacyRedirectionState": {
          "enum": [
            "REDIRECTION_STATE_UNSPECIFIED",
            "REDIRECTION_FROM_GCR_IO_DISABLED",
            "REDIRECTION_FROM_GCR_IO_ENABLED",
            "REDIRECTION_FROM_GCR_IO_FINALIZED"
          ],
          "enumDescriptions": [
            "No redirection status has been set.",
            "Redirection is disabled.",
            "Redirection is enabled.",
            "Redirection is enabled, and has been finalized so cannot be reverted."
          ],
          "description": "The redirection state of the legacy repositories in this project.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set"
        }
      }
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object"
    },
    "KfpArtifact": {
      "type": "object",
      "description": "A detailed representation of a GooGet artifact.",
      "properties": {
        "name": {
          "description": "Output only. Resource name of the KFP artifact. Since users don't directly interact with this resource, the name will be derived from the associated version. For example, when version = \".../versions/sha256:abcdef...\", the name will be \".../kfpArtifacts/sha256:abcdef...\".",
          "type": "string",
          "readOnly": true
        },
        "version": {
          "description": "The version associated with the KFP artifact. Must follow the Semantic Versioning standard.",
          "type": "string"
        }
      },
      "id": "KfpArtifact"
    },
    "ImportYumArtifactsErrorInfo": {
      "type": "object",
      "id": "ImportYumArtifactsErrorInfo",
      "properties": {
        "gcsSource": {
          "$ref": "ImportYumArtifactsGcsSource",
          "description": "Google Cloud Storage location requested."
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      },
      "description": "Error information explaining why a package was not imported."
    },
    "UploadAptArtifactMetadata": {
      "description": "The operation metadata for uploading artifacts.",
      "type": "object",
      "properties": {},
      "id": "UploadAptArtifactMetadata"
    },
    "Hash": {
      "description": "A hash of file content.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The hash value.",
          "format": "byte"
        },
        "type": {
          "description": "The algorithm used to compute the hash value.",
          "type": "string",
          "enum": [
            "HASH_TYPE_UNSPECIFIED",
            "SHA256",
            "MD5"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "SHA256 hash.",
            "MD5 hash."
          ]
        }
      },
      "id": "Hash",
      "type": "object"
    },
    "ImportYumArtifactsMetadata": {
      "type": "object",
      "id": "ImportYumArtifactsMetadata",
      "properties": {},
      "description": "The operation metadata for importing artifacts."
    },
    "YumArtifact": {
      "type": "object",
      "properties": {
        "packageType": {
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ],
          "description": "Output only. An artifact is a binary or source package.",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package (.rpm).",
            "Source package (.srpm)."
          ],
          "type": "string",
          "readOnly": true
        },
        "packageName": {
          "type": "string",
          "description": "Output only. The yum package name of the artifact.",
          "readOnly": true
        },
        "architecture": {
          "readOnly": true,
          "description": "Output only. Operating system architecture of the artifact.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The Artifact Registry resource name of the artifact."
        }
      },
      "id": "YumArtifact",
      "description": "A detailed representation of a Yum artifact."
    },
    "Expr": {
      "id": "Expr",
      "type": "object",
      "properties": {
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
        },
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        }
      },
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."
    },
    "Package": {
      "id": "Package",
      "type": "object",
      "properties": {
        "updateTime": {
          "type": "string",
          "description": "The time when the package was last updated. This includes publishing a new version of the package.",
          "format": "google-datetime"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the package."
        },
        "name": {
          "description": "The name of the package, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1\". If the package ID part contains slashes, the slashes are escaped.",
          "type": "string"
        },
        "createTime": {
          "description": "The time when the package was created.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "Packages are named collections of versions."
    },
    "UploadYumArtifactRequest": {
      "id": "UploadYumArtifactRequest",
      "properties": {},
      "description": "The request to upload an artifact.",
      "type": "object"
    },
    "ListDockerImagesResponse": {
      "description": "The response from listing docker images.",
      "id": "ListDockerImagesResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.",
          "type": "string"
        },
        "dockerImages": {
          "items": {
            "$ref": "DockerImage"
          },
          "type": "array",
          "description": "The docker images returned."
        }
      }
    },
    "DockerImage": {
      "type": "object",
      "id": "DockerImage",
      "properties": {
        "uri": {
          "description": "Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
          "type": "string"
        },
        "uploadTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the image was uploaded."
        },
        "imageSizeBytes": {
          "format": "int64",
          "type": "string",
          "description": "Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource."
        },
        "buildTime": {
          "format": "google-datetime",
          "description": "The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\" is the image's digest."
        },
        "mediaType": {
          "type": "string",
          "description": "Media type of this image, e.g. \"application/vnd.docker.distribution.manifest.v2+json\". This field is returned as the 'metadata.mediaType' field in the Version resource."
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time when the docker image was last updated."
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags attached to this image.",
          "type": "array"
        }
      },
      "description": "DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType * buildTime"
    },
    "ListPackagesResponse": {
      "id": "ListPackagesResponse",
      "description": "The response from listing packages.",
      "properties": {
        "packages": {
          "description": "The packages returned.",
          "type": "array",
          "items": {
            "$ref": "Package"
          }
        },
        "nextPageToken": {
          "description": "The token to retrieve the next page of packages, or empty if there are no more packages to return.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Repository": {
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "satisfiesPzs": {
          "description": "Output only. If set, the repository satisfies physical zone separation.",
          "readOnly": true,
          "type": "boolean"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "The time when the repository was created.",
          "type": "string"
        },
        "description": {
          "description": "The user-provided description of the repository.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the repository, for example: \"projects/p1/locations/us-central1/repositories/repo1\"."
        },
        "format": {
          "enum": [
            "FORMAT_UNSPECIFIED",
            "DOCKER",
            "MAVEN",
            "NPM",
            "APT",
            "YUM",
            "PYTHON",
            "KFP"
          ],
          "enumDescriptions": [
            "Unspecified package format.",
            "Docker package format.",
            "Maven package format.",
            "NPM package format.",
            "APT package format.",
            "YUM package format.",
            "Python package format.",
            "Kubeflow Pipelines package format."
          ],
          "type": "string",
          "description": "The format of packages that are stored in the repository."
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the repository was last updated."
        },
        "sizeBytes": {
          "description": "Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.",
          "type": "string",
          "format": "int64",
          "readOnly": true
        },
        "mavenConfig": {
          "$ref": "MavenRepositoryConfig",
          "description": "Maven repository config contains repository level configuration for the repositories of maven type."
        },
        "kmsKeyName": {
          "type": "string",
          "description": "The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created."
        }
      },
      "description": "A Repository for storing artifacts with a specific format.",
      "id": "Repository"
    },
    "MavenRepositoryConfig": {
      "id": "MavenRepositoryConfig",
      "description": "MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.",
      "properties": {
        "allowSnapshotOverwrites": {
          "description": "The repository with this flag will allow publishing the same snapshot versions.",
          "type": "boolean"
        },
        "versionPolicy": {
          "enumDescriptions": [
            "VERSION_POLICY_UNSPECIFIED - the version policy is not defined. When the version policy is not defined, no validation is performed for the versions.",
            "RELEASE - repository will accept only Release versions.",
            "SNAPSHOT - repository will accept only Snapshot versions."
          ],
          "type": "string",
          "enum": [
            "VERSION_POLICY_UNSPECIFIED",
            "RELEASE",
            "SNAPSHOT"
          ],
          "description": "Version policy defines the versions that the registry will accept."
        }
      },
      "type": "object"
    },
    "UploadYumArtifactResponse": {
      "type": "object",
      "properties": {
        "yumArtifacts": {
          "items": {
            "$ref": "YumArtifact"
          },
          "description": "The Apt artifacts updated.",
          "type": "array"
        }
      },
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "id": "UploadYumArtifactResponse"
    },
    "MavenArtifact": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string",
          "description": "Group ID for the artifact. Example: com.google.guava"
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. Time the artifact was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "pomUri": {
          "description": "Required. URL to access the pom file of the artifact. Example: us-west4-maven.pkg.dev/test-project/test-repo/com/google/guava/guava/31.0/guava-31.0.pom",
          "type": "string"
        },
        "version": {
          "description": "Version of this artifact.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. registry_location, project_id, repository_name and maven_artifact forms a unique artifact For example, \"projects/test-project/locations/us-west4/repositories/test-repo/mavenArtifacts/ com.google.guava:guava:31.0-jre\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"com.google.guava:guava:31.0-jre\" is the maven artifact."
        },
        "artifactId": {
          "type": "string",
          "description": "Artifact ID for the artifact."
        },
        "updateTime": {
          "description": "Output only. Time the artifact was updated.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "MavenArtifact",
      "description": "MavenArtifact represents a maven artifact."
    },
    "OperationMetadata": {
      "type": "object",
      "description": "Metadata type for longrunning-operations, currently empty.",
      "properties": {},
      "id": "OperationMetadata"
    },
    "UploadYumArtifactMediaResponse": {
      "description": "The response to upload an artifact.",
      "id": "UploadYumArtifactMediaResponse",
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      }
    },
    "Status": {
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object"
    },
    "ListTagsResponse": {
      "id": "ListTagsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of tags, or empty if there are no more tags to return."
        },
        "tags": {
          "items": {
            "$ref": "Tag"
          },
          "description": "The tags returned.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "The response from listing tags."
    },
    "ImportYumArtifactsGcsSource": {
      "properties": {
        "uris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Cloud Storage paths URI (e.g., gs://my_bucket//my_object)."
        },
        "useWildcards": {
          "type": "boolean",
          "description": "Supports URI wildcards for matching multiple objects from a single URI."
        }
      },
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "type": "object",
      "id": "ImportYumArtifactsGcsSource"
    },
    "ImportAptArtifactsErrorInfo": {
      "description": "Error information explaining why a package was not imported.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "ImportAptArtifactsGcsSource"
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      },
      "id": "ImportAptArtifactsErrorInfo"
    },
    "UploadKfpArtifactMetadata": {
      "type": "object",
      "properties": {},
      "id": "UploadKfpArtifactMetadata",
      "description": "The operation metadata for uploading KFP artifacts."
    },
    "BatchDeleteVersionsMetadata": {
      "properties": {
        "failedVersions": {
          "description": "The versions the operation failed to delete.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "BatchDeleteVersionsMetadata",
      "type": "object",
      "description": "The metadata of an LRO from deleting multiple versions."
    },
    "ListRepositoriesResponse": {
      "description": "The response from listing repositories.",
      "type": "object",
      "id": "ListRepositoriesResponse",
      "properties": {
        "repositories": {
          "type": "array",
          "description": "The repositories returned.",
          "items": {
            "$ref": "Repository"
          }
        },
        "nextPageToken": {
          "description": "The token to retrieve the next page of repositories, or empty if there are no more repositories to return.",
          "type": "string"
        }
      }
    },
    "UploadYumArtifactMetadata": {
      "type": "object",
      "properties": {},
      "id": "UploadYumArtifactMetadata",
      "description": "The operation metadata for uploading artifacts."
    },
    "ImportAptArtifactsMetadata": {
      "id": "ImportAptArtifactsMetadata",
      "description": "The operation metadata for importing artifacts.",
      "type": "object",
      "properties": {}
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty"
    },
    "Policy": {
      "type": "object",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "properties": {
        "bindings": {
          "type": "array",
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "items": {
            "$ref": "Binding"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "format": "byte",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        }
      },
      "id": "Policy"
    },
    "ListVersionsResponse": {
      "type": "object",
      "description": "The response from listing versions.",
      "id": "ListVersionsResponse",
      "properties": {
        "versions": {
          "type": "array",
          "description": "The versions returned.",
          "items": {
            "$ref": "Version"
          }
        },
        "nextPageToken": {
          "description": "The token to retrieve the next page of versions, or empty if there are no more versions to return.",
          "type": "string"
        }
      }
    },
    "UploadAptArtifactRequest": {
      "id": "UploadAptArtifactRequest",
      "type": "object",
      "description": "The request to upload an artifact.",
      "properties": {}
    },
    "Operation": {
      "properties": {
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation"
    },
    "UploadKfpArtifactMediaResponse": {
      "description": "The response to upload an artifact.",
      "properties": {
        "operation": {
          "$ref": "Operation",
          "description": "Operation that will be returned to the user."
        }
      },
      "type": "object",
      "id": "UploadKfpArtifactMediaResponse"
    },
    "Binding": {
      "description": "Associates `members`, or principals, with a `role`.",
      "id": "Binding",
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "Expr"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
        }
      }
    },
    "UploadAptArtifactMediaResponse": {
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      },
      "id": "UploadAptArtifactMediaResponse",
      "description": "The response to upload an artifact."
    },
    "Location": {
      "type": "object",
      "id": "Location",
      "description": "A resource that represents Google Cloud Platform location.",
      "properties": {
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}"
        },
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        },
        "name": {
          "type": "string",
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "PythonPackage": {
      "id": "PythonPackage",
      "description": "PythonPackage represents a python artifact.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. registry_location, project_id, repository_name and python_package forms a unique package name:`projects//locations//repository//pythonPackages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/ python_package:1.0.0\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and python_package:1.0.0\" is the python package."
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Time the package was updated.",
          "format": "google-datetime"
        },
        "version": {
          "description": "Version of this package.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time the package was created.",
          "type": "string"
        },
        "packageName": {
          "description": "Package for the artifact.",
          "type": "string"
        },
        "uri": {
          "description": "Required. URL to access the package. Example: us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImportAptArtifactsRequest": {
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "ImportAptArtifactsGcsSource"
        }
      },
      "id": "ImportAptArtifactsRequest",
      "description": "The request to import new apt artifacts."
    },
    "NpmPackage": {
      "id": "NpmPackage",
      "description": "NpmPackage represents an npm artifact.",
      "properties": {
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Tags attached to this package."
        },
        "name": {
          "type": "string",
          "description": "Required. registry_location, project_id, repository_name and npm_package forms a unique package For example, \"projects/test-project/locations/us-west4/repositories/test-repo/npmPackages/ npm_test:1.0.0\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and npm_test:1.0.0\" is the npm package."
        },
        "packageName": {
          "type": "string",
          "description": "Package for the artifact."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time the package was created.",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "Version of this package."
        },
        "updateTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time the package was updated.",
          "format": "google-datetime"
        }
      },
      "type": "object"
    },
    "ImportAptArtifactsResponse": {
      "properties": {
        "errors": {
          "items": {
            "$ref": "ImportAptArtifactsErrorInfo"
          },
          "type": "array",
          "description": "Detailed error info for packages that were not imported."
        },
        "aptArtifacts": {
          "description": "The Apt artifacts imported.",
          "items": {
            "$ref": "AptArtifact"
          },
          "type": "array"
        }
      },
      "id": "ImportAptArtifactsResponse",
      "description": "The response message from importing APT artifacts.",
      "type": "object"
    },
    "ImportYumArtifactsResponse": {
      "type": "object",
      "properties": {
        "yumArtifacts": {
          "items": {
            "$ref": "YumArtifact"
          },
          "type": "array",
          "description": "The yum artifacts imported."
        },
        "errors": {
          "description": "Detailed error info for packages that were not imported.",
          "type": "array",
          "items": {
            "$ref": "ImportYumArtifactsErrorInfo"
          }
        }
      },
      "description": "The response message from importing YUM artifacts.",
      "id": "ImportYumArtifactsResponse"
    },
    "TestIamPermissionsRequest": {
      "properties": {
        "permissions": {
          "type": "array",
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "TestIamPermissionsRequest",
      "type": "object",
      "description": "Request message for `TestIamPermissions` method."
    },
    "ListFilesResponse": {
      "description": "The response from listing files.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The token to retrieve the next page of files, or empty if there are no more files to return.",
          "type": "string"
        },
        "files": {
          "type": "array",
          "description": "The files returned.",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1File"
          }
        }
      },
      "id": "ListFilesResponse"
    },
    "ImportYumArtifactsRequest": {
      "id": "ImportYumArtifactsRequest",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "ImportYumArtifactsGcsSource"
        }
      },
      "description": "The request to import new yum artifacts."
    },
    "ListPythonPackagesResponse": {
      "description": "The response from listing python packages.",
      "id": "ListPythonPackagesResponse",
      "properties": {
        "pythonPackages": {
          "description": "The python packages returned.",
          "items": {
            "$ref": "PythonPackage"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return."
        }
      },
      "type": "object"
    },
    "ListMavenArtifactsResponse": {
      "type": "object",
      "properties": {
        "mavenArtifacts": {
          "items": {
            "$ref": "MavenArtifact"
          },
          "type": "array",
          "description": "The maven artifacts returned."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return."
        }
      },
      "description": "The response from listing maven artifacts.",
      "id": "ListMavenArtifactsResponse"
    },
    "GoogleDevtoolsArtifactregistryV1File": {
      "id": "GoogleDevtoolsArtifactregistryV1File",
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The name of the Package or Version that owns this file, if any."
        },
        "sizeBytes": {
          "format": "int64",
          "type": "string",
          "description": "The size of the File in bytes."
        },
        "createTime": {
          "description": "The time when the File was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "hashes": {
          "description": "The hashes of the file content.",
          "items": {
            "$ref": "Hash"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the file, for example: \"projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt\". If the file ID part contains slashes, they are escaped.",
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the File was last updated."
        }
      },
      "description": "Files store content that is potentially associated with Packages or Versions."
    },
    "ListNpmPackagesResponse": {
      "properties": {
        "npmPackages": {
          "type": "array",
          "description": "The npm packages returned.",
          "items": {
            "$ref": "NpmPackage"
          }
        },
        "nextPageToken": {
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The response from listing npm packages.",
      "id": "ListNpmPackagesResponse"
    },
    "AptArtifact": {
      "description": "A detailed representation of an Apt artifact. Information in the record is derived from the archive's control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html",
      "properties": {
        "architecture": {
          "type": "string",
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true
        },
        "name": {
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "type": "string",
          "readOnly": true
        },
        "component": {
          "description": "Output only. Repository component of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageType": {
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ],
          "readOnly": true,
          "type": "string",
          "description": "Output only. An artifact is a binary or source package.",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package.",
            "Source package."
          ]
        },
        "packageName": {
          "description": "Output only. The Apt package name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "controlFile": {
          "description": "Output only. Contents of the artifact's control metadata file.",
          "type": "string",
          "format": "byte",
          "readOnly": true
        }
      },
      "id": "AptArtifact",
      "type": "object"
    },
    "ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "locations": {
          "items": {
            "$ref": "Location"
          },
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array"
        }
      },
      "id": "ListLocationsResponse"
    },
    "UploadAptArtifactResponse": {
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "properties": {
        "aptArtifacts": {
          "items": {
            "$ref": "AptArtifact"
          },
          "description": "The Apt artifacts updated.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "UploadAptArtifactResponse"
    },
    "Tag": {
      "id": "Tag",
      "description": "Tags point to a version and represent an alternative name that can be used to access the version.",
      "properties": {
        "name": {
          "description": "The name of the tag, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1\". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\\-._~:@], anything else must be URL encoded.",
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "The name of the version the tag refers to, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811\" If the package or version ID parts contain slashes, the slashes are escaped."
        }
      },
      "type": "object"
    },
    "ImportAptArtifactsGcsSource": {
      "id": "ImportAptArtifactsGcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "type": "object",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs://my_bucket//my_object).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "type": "boolean",
          "description": "Supports URI wildcards for matching multiple objects from a single URI."
        }
      }
    }
  },
  "batchPath": "batch",
  "name": "artifactregistry",
  "protocol": "rest",
  "documentationLink": "https://cloud.google.com/artifacts/docs/",
  "rootUrl": "https://artifactregistry.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "baseUrl": "https://artifactregistry.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "servicePath": "",
  "kind": "discovery#restDescription",
  "revision": "20221022",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform.read-only": {
          "description": "View your data across Google Cloud services and see the email address of your Google Account"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "version": "v1",
  "canonicalName": "Artifact Registry",
  "discoveryVersion": "v1",
  "title": "Artifact Registry API",
  "ownerName": "Google"
}
